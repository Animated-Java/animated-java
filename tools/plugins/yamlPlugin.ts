import { readFile } from 'node:fs/promises'
import * as path from 'path'
import * as fs from 'fs'
import type { Plugin } from 'esbuild'
import { load, type LoadOptions } from 'js-yaml'

const DEFAULT_OUT = './dist/yaml-types/'

export interface YAMLPluginOptions {
	/**
	 * Options to pass to the YAML parser.
	 * @see https://github.com/nodeca/js-yaml
	 */
	parserOptions?: LoadOptions
	/**
	 * The folder to put the generated yaml.d.ts files in.
	 */
	out?: string
}

function generateYamlTypes(yaml: any, inPath: string) {
	const outPath = path.join(
		path.resolve(process.cwd(), DEFAULT_OUT),
		path.relative(process.cwd(), inPath)
	)
	const outDir = path.dirname(outPath)

	const yamlTypes = [
		'// This file was generated by esbuild-yaml-plugin',
		'// Do not modify this file directly.',
		'// If you want to change the types, modify the YAML file instead.',
		`declare module '${path.normalize(inPath).replace(/\\/g, '/')}' {`,
		`const yaml: ${JSON.stringify(yaml)}`,
		'export default yaml',
		'}',
	].join('\n')

	const yamlTypesPath = outPath.replace(/\.ya?ml$/, '.d.ts')
	console.log(yamlTypesPath)

	fs.mkdirSync(outDir, { recursive: true })
	fs.writeFileSync(yamlTypesPath, yamlTypes)
}

export function YAMLPlugin({ parserOptions }: YAMLPluginOptions = {}): Plugin {
	return {
		name: 'yaml',
		setup(build) {
			build.onResolve({ filter: /\.ya?ml$/ }, args => {
				if (args.resolveDir === '') return

				return {
					path: path.isAbsolute(args.path)
						? args.path
						: path.join(args.resolveDir, args.path),
					namespace: 'yaml',
				}
			})

			build.onLoad({ filter: /\.ya?ml$/, namespace: 'yaml' }, async args => {
				const yamlContent = await readFile(args.path, 'utf8')

				const parsed = load(yamlContent, parserOptions)
				// generateYamlTypes(parsed, args.path)
				return {
					loader: 'json',
					contents: JSON.stringify(parsed),
				}
			})

			build.onResolve({ filter: /\.ya?ml\?raw$/ }, args => {
				if (args.resolveDir === '') return

				if (args.path.endsWith('?raw')) {
					args.path = args.path.slice(0, -4)
				}
				return {
					path: path.isAbsolute(args.path)
						? args.path
						: path.join(args.resolveDir, args.path),
					namespace: 'yaml-raw',
				}
			})

			build.onLoad({ filter: /\.ya?ml$/, namespace: 'yaml-raw' }, async args => {
				const yamlContent = await readFile(args.path, 'utf8')

				return {
					loader: 'text',
					contents: yamlContent,
				}
			})
		},
	}
}

export default YAMLPlugin
