# REVIEW - All uses of `'<%arguments[1].functions.at(-1)%>'` are temporary and should be replaced with an officially supported method once MCB is updated.

dir <%export_namespace%> {
	function on_load {
		IF (use_storage_for_animation) {
			REPEAT (animations) as animation {
				data remove storage aj.<%export_namespace%>:animations <%animation.storage_name%>
			}
			<%animationStorage.join('\n')%>
		}
		<%%
			animations.forEach(animation => {
				emit(`scoreboard objectives add ${OBJECTIVES.FRAME(animation.path_name)} dummy`)
			})
		%%>
	}

	function invalid_version_warning {
		# This function will contain a tellraw if the datapack is loaded in the wrong version.
	}

	dir root {
		IF (show_outdated_warning) {
			function on_load {
				# Only run if the entity is an instance of this rig.
				execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
				# Check if the rig is outdated by comparing the function's rigHash of the rig to the rigHash stored in the entity data.
				execute \
					on passengers \
					if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] \
					unless data entity @s {data:{rigHash: '<%rigHash%>'}} \
					on vehicle \
				run block zzz/check_rig_hash {
					execute store result storage aj:temp x int 1 store result score #this.x aj.i run data get entity @s Pos[0] 1
					execute store result storage aj:temp y int 1 store result score #this.y aj.i run data get entity @s Pos[1] 1
					execute store result storage aj:temp z int 1 store result score #this.z aj.i run data get entity @s Pos[2] 1
					block show_outdated_warning { with storage aj:temp
						$tellraw @a <%TELLRAW.RIG_OUTDATED()%>
					}
					data modify entity @s data.rigHash set value '<%rigHash%>'
					execute on passengers run data merge entity @s {Glowing: 1b, glow_color_override: <%0xff0000%>}
					summon minecraft:text_display ~ ~ ~ { \
						Tags:['<%TAGS.GLOBAL_ENTITY()%>', '<%TAGS.OUTDATED_RIG_TEXT_DISPLAY()%>', '<%TAGS.NEW()%>'], \
						text:'<%TELLRAW.RIG_OUTDATED_TEXT_DISPLAY()%>', \
						alignment: 'center', \
						billboard: 'vertical', \
						transformation:{ \
							translation:[0f,<%boundingBox[1]/16%>f,0f], \
							left_rotation:[0f,0f,0f,1f], \
							right_rotation:[0f,0f,0f,1f], \
							scale:[1f,1f,1f] \
						} \
					}
					ride @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] mount @s
					tag @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] remove <%TAGS.NEW()%>
				}
				scoreboard players set @s <%OBJECTIVES.IS_RIG_LOADED()%> 1
			}
		}
		function on_tick {
			execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
			IF (show_outdated_warning) {
				execute unless score @s <%OBJECTIVES.IS_RIG_LOADED()%> matches 1 run function #*global/root/on_load
			}
			# Run `pre_tick` function hooks
			function #*<%export_namespace%>/as_root/pre_tick
			# Tick Playing Animations
			REPEAT (animations) as animation {
				execute if entity @s[tag=<%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>] run \
					function *<%export_namespace%>/animations/<%animation.path_name%>/zzz/on_tick
			}
			IF (has_locators || has_cameras) {
				# Update locator and camera orientations
				execute \
					on passengers \
					if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] \
				run block zzz/on_tick/locators_and_cameras {
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator')) as node {
						block select_locator_<%node.path_name%> { with entity @s data.locators.<%node.path_name%>
							IF (node.config?.use_entity) {
								$execute \
									as $(uuid) \
									positioned ^$(posx) ^$(posy) ^$(posz) \
									rotated ~$(roty) ~$(rotx) \
								run block as_locator_<%node.path_name%> {
									tp @s ~ ~ ~ ~ ~
									IF (node.config?.sync_passenger_rotation) {
										execute on passengers run rotate @s ~ ~
									}
									<%%
										if (node.config?.ticking_commands) {
											emit.mcb(node.config.ticking_commands)
										}
									%%>
								}
							} ELSE IF (node.config?.ticking_commands) {
								$execute \
									positioned ^$(posx) ^$(posy) ^$(posz) \
									rotated ~$(roty) ~$(rotx) \
								run block as_locator_<%node.path_name%> {
									<%%
										if (node.config?.ticking_commands) {
											emit.mcb(node.config.ticking_commands)
										}
									%%>
								}
							}
						}
					}
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as node {
						block select_camera_<%node.path_name%> { with entity @s data.cameras.<%node.path_name%>
							$execute \
								as $(uuid) \
								positioned ^$(posx) ^$(posy) ^$(posz) \
								rotated ~$(roty) ~$(rotx) \
							run tp @s ~ ~ ~ ~ ~
						}
					}
				}
			}

			# Rotation Logic
			execute at @s on passengers run rotate @s ~ ~
			IF (root_ticking_commands) {
				<%%
					emit.mcb(root_ticking_commands)
				%%>
			}
			# Run `post_tick` function hooks
			function #*<%export_namespace%>/as_root/post_tick
		}
	}

	# FIXME - Maybe remove these in favor of the new options-based system?
	# Function Tag Hooks
	dir as_root {
		# All child functions of this folder run as the root entity
		# Runs before the rig is ticked.
		tag functions pre_tick {
		}
		# Runs after the rig is ticked.
		tag functions post_tick {
		}
		# Runs when the rig is summoned.
		tag functions on_summon {
		}
		# Runs when the rig is removed.
		tag functions on_remove {
		}
	}

	dir animations {
		REPEAT (animations) as animation {
			dir <%animation.path_name%> {
				# TODO: Maybe add an exclusive argument to the play function that will pause all other animations before playing this one.
				function play {
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> 0
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/set_frame {frame: 0}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
				}

				function stop {
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> 0
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/set_frame {frame: 0}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
				}

				function pause {
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
				}

				function resume {
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
				}

				function next_frame {
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					execute if score @s <%OBJECTIVES.FRAME(animation.path_name)%> matches <%animation.duration%>.. run scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> 1
					execute store result storage aj:temp frame int 1 run scoreboard players get @s <%OBJECTIVES.FRAME(animation.path_name)%>
					execute at @s run function ./zzz/apply_frame with storage aj:temp
					scoreboard players add @s <%OBJECTIVES.FRAME(animation.path_name)%> 1
				}

				function set_frame {
					# Sets the frame without interpolation
					#ARGS: {frame: int}
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> $(frame)
					execute at @s run function ./zzz/set_frame with storage aj:temp
				}

				function apply_frame {
					#ARGS: {frame: int}
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> $(frame)
					execute at @s run function ./zzz/apply_frame with storage aj:temp
				}

				function tween {
					# Attempts to smoothly transition from the currently playing animation into this one.
					#ARGS: {duration: int, to_frame: int}
					IF (show_function_errors) {
						# Assert that the function is being run as the root entity.
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
					}
					function *<%export_namespace%>/animations/pause_all

					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
					$scoreboard players set @s <%OBJECTIVES.TWEEN_DURATION()%> $(duration)
					$scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> $(to_frame)

					scoreboard players operation #this <%OBJECTIVES.I()%> = @s <%OBJECTIVES.TWEEN_DURATION()%>
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/apply_frame {frame: 0}
					$execute at @s run function ./zzz/apply_frame {frame: $(to_frame)}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
					execute on passengers store result entity @s interpolation_duration int 1 run scoreboard players get #this <%OBJECTIVES.I()%>
				}

				dir zzz {
					function on_tick {
						# Tweening logic
						scoreboard players remove @s <%OBJECTIVES.TWEEN_DURATION()%> 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 1.. run return 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 0 on passengers run \
							data modify entity @s interpolation_duration set value <%interpolation_duration%>
						# Animation logic
						IF (animation.loop_mode === 'loop' && animation.loop_delay === 0) {
							# Makes sure commands keyframes in the last frame of the animation are activated.
							execute if score @s <%OBJECTIVES.FRAME(animation.path_name)%> matches -1 run \
								block commands_keyframe_loop_patch {
									function ./apply_frame {frame: <%animation.duration-1%>}
									scoreboard players add @s <%OBJECTIVES.FRAME(animation.path_name)%> 1
								}
						}
						execute store result storage aj:temp frame int 1 run \
							scoreboard players get @s <%OBJECTIVES.FRAME(animation.path_name)%>
						function ./apply_frame with storage aj:temp
						IF (animation.loop_mode === 'loop') {
							# Loop the animation back to the start once it reaches the last frame.
							# If loop_delay is 0, the animation will loop instantly, otherwise, it will wait for the specified amount of ticks.
							execute \
								if score @s <%OBJECTIVES.FRAME(animation.path_name)%> \
								matches <%animation.duration-2 + animation.loop_delay%>.. \
							run return run \
								scoreboard players set @s <%OBJECTIVES.FRAME(animation.path_name)%> <%animation.loop_delay === 0 ? -1 : 0%>
						} ELSE IF (animation.loop_mode === 'hold') {
							# Pause the animation at the last frame.
							execute \
								if score @s <%OBJECTIVES.FRAME(animation.path_name)%> \
								matches <%animation.duration-1%>.. \
							run return run \
								function ../pause
						} ELSE IF (animation.loop_mode === 'once') {
							# Stop the animation once it reaches the last frame.
							execute \
								if score @s <%OBJECTIVES.FRAME(animation.path_name)%> \
								matches <%animation.duration-1%> \
							run return run \
								function ../stop
						}
						scoreboard players add @s <%OBJECTIVES.FRAME(animation.path_name)%> 1
					}

					IF (use_storage_for_animation) {
						function set_frame {
							#ARGS: {frame: int}
							REPEAT (Object.values(animation.modified_nodes).sort(nodeSorter)) as node {
								IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
									$execute on passengers run \
										data modify entity @s[tag=<%TAGS.PROJECT_NODE_NAMED(export_namespace, node.path_name)%>] {} merge from \
										storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).<%node.type.charAt(0) + '_' + node.storage_name%>
								} ELSE IF (['locator', 'camera'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run \
										data modify entity @s data.<%node.type + 's.' + node.storage_name%> merge from \
										storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).<%node.type.charAt(0) + '_' + node.storage_name%>
								}
							}
							IF (animation.frames.some(v => v.variant)) {
								$execute \
									if data storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).variant \
									unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] \
								run { with storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).variant
									#ARGS: {name: string, condition: string}
									$execute $(condition)run function *<%export_namespace%>/variants/$(name)/apply
								}
							}
							execute on passengers run data modify entity @s[type=!marker] start_interpolation set value -1
						}

						function apply_frame {
							#ARGS: {frame: int}
							REPEAT (Object.values(animation.modified_nodes).sort(nodeSorter)) as node {
								IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.PROJECT_NODE_NAMED(export_namespace, node.path_name)%>] run \
										data modify entity @s {} merge from \
										storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).<%node.type.charAt(0) + '_' + node.storage_name%>
								} ELSE IF (['locator', 'camera'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run \
										data modify entity @s data.<%node.type + 's.' + node.storage_name%> merge from \
										storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).<%node.type.charAt(0) + '_' + node.storage_name%>
								}
							}
							IF (animation.frames.some(v => v.variant)) {
								$execute \
									if data storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).variant \
									unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] \
								run { with storage aj.<%export_namespace%>:animations <%animation.storage_name%>.$(frame).variant
									#ARGS: {name: string, condition: string}
									$execute $(condition)run function *<%export_namespace%>/variants/$(name)/apply
								}
							}
						}
					} ELSE {
						function set_frame {
							# Sets the frame without interpolation
							#ARGS: {frame: int}
							$execute on passengers if entity @s[type=marker] run \
								function ./frames/$(frame) with entity @s data.bones
							execute on passengers run \
								data modify entity @s[type=!marker] start_interpolation set value -1
						}

						function apply_frame {
							#ARGS: {frame: int}
							$execute on passengers if entity @s[type=marker] run \
								function ./frames/$(frame) with entity @s data.bones
						}
						# FIXME - %NEWLINE_PATCH% is a temporary solution to temporarily fix an MCB bug where extra newlines are being added to the output.
						dir frames {
							<%%
								// A record of node uuid to INodeTransform.
								// Keeps track of the last time a bone was updated.
								// Only used for step keyframe interpolation.
								const lastActiveFrame = {}
								const modifiedNodes = Object.values(animation.modified_nodes).sort(nodeSorter);
								for (const [frameIndex, frame] of animation.frames.entries()) {
									const merged = { locators: {}, cameras: {} }
									let frameFunc = `function ${frameIndex}%NEWLINE_PATCH%{`;
									for (const node of modifiedNodes) {
										const transform = frame.node_transforms[node.uuid]
										// Skip if the node doesn't have a transform for this frame.
										if (!transform) continue
										switch (node.type) {
											case 'bone':
											case 'text_display':
											case 'item_display':
											case 'block_display': {
												const lastFrame = lastActiveFrame[node.uuid]
												const isStepInterpolation = !!(lastFrame?.interpolation === 'step')
												lastActiveFrame[node.uuid] = transform

												if (transform.interpolation === 'pre-post' || isStepInterpolation) {
													frameFunc +=
														`\n$data merge entity $(${node.type + '_' + node.path_name})%NEWLINE_PATCH%{`
															+ `transformation: ${matrixToNbtFloatArray(transform.matrix).toString()},`
															+ `start_interpolation: ${isStepInterpolation ? -1 : 0},`
															+ `interpolation_duration: ${isStepInterpolation ? 0 : interpolation_duration}`
														+ `}`
												}
												else {
													frameFunc +=
														`\n$data merge entity $(${node.type + '_' + node.path_name})%NEWLINE_PATCH%{`
															+ `transformation: ${matrixToNbtFloatArray(transform.matrix).toString()},`
															+ `start_interpolation: 0,`
															+ `interpolation_duration: ${interpolation_duration}`
														+ `}`
												}
												break
											}
											case 'locator': {
												if (node.config?.use_entity || node.config?.ticking_commands) {
													merged.locators[node.path_name] = {
														posx: transform.pos[0],
														posy: transform.pos[1],
														posz: transform.pos[2],
														roty: transform.head_rot[1],
														rotx: transform.head_rot[0]
													}
												}
												if (transform.commands) {
													frameFunc +=
														`\nexecute on vehicle unless entity @s[tag=${TAGS.TRANSFORMS_ONLY()}] `
														+ `positioned ^${roundTo(transform.pos[0], 10)} ^${roundTo(transform.pos[1], 10)} ^${roundTo(transform.pos[2], 10)} `
														+ `rotated ~${roundTo(transform.head_rot[1], 10)} ~${roundTo(transform.head_rot[0], 10)} `
														+ `${transform.commands_execute_condition ? transform.commands_execute_condition + ' ' : ''}run `
														+ `block ${frameIndex}_locator_commands%NEWLINE_PATCH%{\n`
															+ `${transform.commands}`
														+ `\n}`
												}
												break
											}
											case 'camera': {
												merged.cameras[node.path_name] = {
													posx: transform.pos[0],
													posy: transform.pos[1],
													posz: transform.pos[2],
													roty: transform.head_rot[1],
													rotx: transform.head_rot[0]
												}
												;break
											}
										}
									}

									if (Object.keys(merged.locators).length > 0 || Object.keys(merged.cameras).length > 0) {
										frameFunc += `\ndata modify entity @s data merge value ${JSON.stringify(merged)}`
									}

									if (frame.variants?.length) {
										const variant = rig.variants[frame.variants[0]]
										if (!variant) {
											throw new Error(`Could not find Variant with uuid "${frame.variants[0]}" while generating frame "${frameIndex}" of animation "${animation.name}".`)
										}
										const execute_condition = frame.variants_execute_condition ? frame.variants_execute_condition + ' ' : ''
										frameFunc += `\nexecute on vehicle unless entity @s[tag=${TAGS.TRANSFORMS_ONLY()}] ${execute_condition}run function *${export_namespace}/variants/${variant.name}/apply`
									}

									// Root commands keyframes.
									if (frame.commands) {
										const execute_condition = frame.commands_execute_condition ? frame.commands_execute_condition + ' ' : ''
										frameFunc += `\nexecute on vehicle unless entity @s[tag=${TAGS.TRANSFORMS_ONLY()}] at @s ${execute_condition}run block ${frameIndex}_root_commands%NEWLINE_PATCH%{\n${frame.commands}\n}`
									}
									frameFunc += `\n}`
									emit.mcb(frameFunc.replaceAll(/%NEWLINE_PATCH%\n?/g, ' '))
								}
							%%>
						}
					}
				}
			}
		}
		function pause_all {
			# Pauses all animations
			IF (show_function_errors) {
				# Assert that the function is being run as the root entity.
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
			}
			REPEAT (animations) as animation {
				tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.path_name)%>
			}
		}
	}

	function summon {
		#Args: {args:{variant: string, animation: string, frame: int, start_animation: boolean}}
		# frame is ignored unless animation is specified.

		data modify storage aj:temp args set value {variant:'', animation:'', frame: 0}
		$execute store success score #success <%OBJECTIVES.I()%> run data modify storage aj:temp args set value $(args)

		summon minecraft:item_display ~ ~ ~ { \
			Tags:[ \
				'<%TAGS.NEW()%>', \
				'<%TAGS.GLOBAL_ENTITY()%>', \
				'<%TAGS.GLOBAL_ROOT()%>', \
				'<%TAGS.PROJECT_ENTITY(export_namespace)%>', \
				'<%TAGS.PROJECT_ROOT(export_namespace)%>' \
			], \
			teleport_duration: 0, \
			interpolation_duration: <%interpolation_duration%>, \
			Passengers:<%root_entity_passengers%>, \
		}
		execute as @e[type=item_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] run block zzz/summon/as_root_entity {
			execute store result score @s <%OBJECTIVES.ID()%> run scoreboard players add aj.last_id <%OBJECTIVES.ID()%> 1

			execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run block as_data_entity {
				function *global/internal/gu/convert_uuid_array_to_string
				data modify entity @s data.bones.data_data set from storage aj:uuid main.out

				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator' && v.config?.use_entity)) as locator {
					summon <%locator.config.entity_type%> \
						^<%roundTo(locator.default_transform.pos[0], 10)%> \
						^<%roundTo(locator.default_transform.pos[1], 10)%> \
						^<%roundTo(locator.default_transform.pos[2], 10)%> \
						{Tags:<%getNodeTags(locator, rig)%>}
					execute \
						as @e[ \
							type=<%locator.config.entity_type%>, \
							tag=<%TAGS.NEW()%>,tag=<%TAGS.GLOBAL_LOCATOR()%>, \
							limit=1, \
							distance=..0.01 \
						] \
					run block as_locator/<%locator.path_name%> {
						# run block ../as_locator/<%locator.path_name%> {
						tag @s remove <%TAGS.NEW()%>

						function *global/internal/gu/convert_uuid_array_to_string
						tp @s \
							^<%roundTo(locator.default_transform.pos[0], 10)%> \
							^<%roundTo(locator.default_transform.pos[1], 10)%> \
							^<%roundTo(locator.default_transform.pos[2], 10)%> \
							~<%roundTo(locator.default_transform.head_rot[1], 10)%> \
							~<%roundTo(locator.default_transform.head_rot[0], 10)%>
						<%%
							if (locator.config.summon_commands) {
								emit.mcb(locator.config.summon_commands)
							}
						%%>
					}
					data modify entity @s data.locators.<%locator.name%>.uuid set from storage aj:uuid main.out
				}

				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as camera {
					summon item_display \
						^<%roundTo(camera.default_transform.pos[0], 10)%> \
						^<%roundTo(camera.default_transform.pos[1], 10)%> \
						^<%roundTo(camera.default_transform.pos[2], 10)%> \
						{Tags:<%getNodeTags(camera, rig)%>, teleport_duration: 2}
					execute \
						as @e[ \
							type=item_display, \
							tag=<%TAGS.NEW()%>, \
							tag=<%TAGS.GLOBAL_CAMERA()%>, \
							limit=1, \
							distance=..0.01 \
						] \
					run block ../as_camera/<%camera.path_name%> {
						tag @s remove <%TAGS.NEW()%>
						function *global/internal/gu/convert_uuid_array_to_string
						tp @s \
							^<%roundTo(camera.default_transform.pos[0], 10)%> \
							^<%roundTo(camera.default_transform.pos[1], 10)%> \
							^<%roundTo(camera.default_transform.pos[2], 10)%> \
							~<%roundTo(camera.default_transform.head_rot[1], 10)%> \
							~<%roundTo(camera.default_transform.head_rot[0], 10)%>
					}
					data modify entity @s data.cameras.<%camera.name%>.uuid set from storage aj:uuid main.out
				}

				REPEAT (Object.values(rig.nodes).filter(v => ['bone', 'text_display', 'item_display', 'block_display'].includes(v.type))) as node {
					execute on vehicle on passengers if entity @s[tag=<%TAGS.PROJECT_NODE_NAMED(export_namespace, node.name)%>] run \
						function *global/internal/gu/convert_uuid_array_to_string
					data modify entity @s data.bones.<%node.type + '_' + node.name%> set from storage aj:uuid main.out
				}
			}

			# Variant Arguement
			IF (Object.keys(rig.variants).length > 1) {
				execute if data storage aj:temp args.variant run block variant_arg/process { with storage aj:temp args
					# If the variant argument is *explicitly* set to an empty string, return an error.
					execute if data storage aj:temp {args:{variant:''}} run return run block if_empty {
						# Tell the user that the variant cannot be empty.
						tellraw @a <%TELLRAW.VARIANT_CANNOT_BE_EMPTY()%>
						function *<%export_namespace%>/remove/this
					}
					# Attempt to apply the requested variant.
					# We get the success of the `try_apply` function in just in case the user's arguments are *very* wrong.
					execute store success score #success <%OBJECTIVES.I()%> run block try_apply { with storage aj:temp args
						$execute if function *<%export_namespace%>/variants/$(variant)/apply run return 1
						# If the apply function fails, the variant doesn't exist, so we return an error.
						return fail
					}
					# If the apply function failed, return an error.
					execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run block invalid_variant { with storage aj:temp args
						# Tell the user that the provided variant doesn't exist, remove the rig, and list all available variants for this rig.
						$tellraw @a <%TELLRAW.INVALID_VARIANT('$(variant)', rig.variants)%>
						function *<%export_namespace%>/remove/this
					}
				}
			} ELSE {
				execute if data storage aj:temp args.variant run block zzz/variant_arg/no_variants_warning {
					tellraw @a <%TELLRAW.NO_VARIANTS()%>
					function *<%export_namespace%>/remove/this
				}
			}

			# Animation Argument
			# If the animation argument is not provided, set the default pose.
			execute unless data storage aj:temp args.animation run function *<%export_namespace%>/set_default_pose
			# If the animation argument is provided, attempt to apply the animation.
			execute if data storage aj:temp args.animation run block animation_arg/process { with storage aj:temp args
				# If the animation argument is *explicitly* set to an empty string, return an error.
				execute if data storage aj:temp {args:{animation:''}} run return run block if_empty {
					tellraw @a <%TELLRAW.ANIMATION_CANNOT_BE_EMPTY()%>
					function *<%export_namespace%>/remove/this
				}
				# Automatically set the frame argument to 0 if the frame argument is not provided.
				# Takes advantage of `store result score` setting the score to 0 if the command fails.
				execute \
					store result storage aj:temp args.frame int 1 \
					store result score #frame <%OBJECTIVES.I()%> \
				run \
					data get storage aj:temp args.frame
				# If the frame argument is negative, return an error.
				execute if score #frame <%OBJECTIVES.I()%> matches ..-1 run return run block no_negative {
					# Tell the user that the frame argument cannot be negative.
					tellraw @a <%TELLRAW.FRAME_CANNOT_BE_NEGATIVE()%>
					function *<%export_namespace%>/remove/this
				}
				# Attempt to apply the animation frame.
				execute store success score #success <%OBJECTIVES.I()%> run block try_set_frame { with storage aj:temp args
					# Make sure we're only applying transforms when setting the summon pose.
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					$execute store success score #success <%OBJECTIVES.I()%> run function *<%export_namespace%>/animations/$(animation)/set_frame with storage aj:temp args
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
					execute if score #success <%OBJECTIVES.I()%> matches 1 run return 1
					# If the set_frame function fails, the animation doesn't exist, so we return an error.
					return fail
				}
				# If the set_frame function failed, return an error.
				execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run block invalid_animation { with storage aj:temp args
					# Tell the user that the provided animation doesn't exist, remove the rig, and list all available animations for this rig.
					$tellraw @a <%TELLRAW.INVALID_ANIMATION('$(animation)', animations)%>
					function *<%export_namespace%>/remove/this
				}

				# If the animation is successfully applied, and the start_animation argument is set to true, start the animation.
				execute if data storage aj:temp {args:{start_animation: true}} run block start_animation { with storage aj:temp args
					$function *<%export_namespace%>/animations/$(animation)/resume
				}
			}
			# Align the position and rotation of the root with the summon context, then align the passengers with the root.
			tp @s ~ ~ ~ ~ ~
			execute at @s on passengers run rotate @s ~ ~
			# Apply teleport duration
			data modify entity @s teleport_duration set value <%teleportation_duration%>
			execute on passengers run data modify entity @s teleport_duration set value <%teleportation_duration%>
			# Add in User-defined `On-Summon Commands`
			<%%
				if (custom_summon_commands) emit.mcb(custom_summon_commands)
			%%>

			# Remove the NEW tag from the root entity, and it's passengers.
			tag @s remove <%TAGS.NEW()%>
			execute on passengers run tag @s remove <%TAGS.NEW()%>

			# Run `on_summon` function tag hooks
			function #*<%export_namespace%>/as_root/on_summon
		}
	}

	IF (has_entity_locators) {
		function as_own_locator_entities {
			#ARGS: {command: string}
			IF (show_function_errors) {
				# Assert that the function is being run as the root entity.
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
			}
			$data modify storage aj:temp command set value '$(command)'
			execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run block zzz/as_own_locator_entities/as_data {
				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator' && v.config?.use_entity)) as locator {
					data modify storage aj:temp uuid set from entity @s data.locators.<%locator.name%>.uuid
				}
				block execute_as_uuid { with storage aj:temp
					$execute as $(uuid) run $(command)
				}
			}
		}
	}

	dir remove {
		function all {
			# Removes all instances of this rig from the world.
			execute as @e[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run function *<%export_namespace%>/remove/this
		}

		function entities {
			# Removes all entities related to this rig from the world.
			kill @e[tag=<%TAGS.PROJECT_ENTITY(export_namespace)%>]
		}

		function this {
			# Removes the rig this function is executed as.
			IF (show_function_errors) {
				# Assert that the function is being executed as the root entity.
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
			}

			# Run `on_remove` function tag hooks
			function #*<%export_namespace%>/as_root/on_remove

			IF (has_entity_locators || has_cameras) {
				execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run block zzz/this/as_data {
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator' && v.config?.use_entity)) as locator {
						# REVIEW - This will not kill locators or cameras that have been summoned using an old export of the rig.
						function ./zzz/this/kill_locator with entity @s data.locators.<%locator.name%>
					}
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as camera {
						function ./zzz/this/kill_camera with entity @s data.cameras.<%camera.name%>
					}
				}
			}

			execute on passengers run kill @s
			kill @s
		}

		dir zzz {
			dir this {
				function kill_locator {
					#ARGS: {uuid: string}
					# Recursively remove stacked locator entities
					$execute as $(uuid) run block recursively_kill_passengers {
						execute on passengers run function ^0
						kill @s
					}
				}
				function kill_camera {
					#ARGS: {uuid: string}
					$kill $(uuid)
				}
			}
		}
	}

	IF (Object.keys(rig.variants).length > 1) {
		dir variants {
			REPEAT (Object.values(rig.variants)) as variant {
				dir <%variant.name%> {
					function apply {
						IF (show_function_errors) {
							# Assert that the function is being executed as the root entity.
							execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
								function *global/errors/function_not_executed_as_root_entity \
									{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
						}
						REPEAT (Object.values(rig.nodes)) as node {
							IF (node.type === 'bone' && !variant.excluded_nodes.includes(node.uuid) && (variant.models[node.uuid] !== undefined || node.configs.variants[variant.uuid] !== undefined)) {
								execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.path_name%>] run block zzz/apply_to_bone_<%node.path_name%> {
									IF (variant.models[node.uuid] !== undefined) {
										data modify entity @s item.components.minecraft:custom_model_data.strings[0] set value "<%variant.name%>"
									}
									IF (node.configs.variants[variant.uuid]) {
										<%%
											global.config = BoneConfig.fromJSON(node.configs.variants[variant.uuid])
										%%>
										IF (!global.config.isDefault()) {
											data merge entity @s <%global.config.toNBT(undefined, variant.is_default)%>
										}
									}
								}
							}
						}
						# Return success to allow this function to be used in function conditions.
						return 1
					}
				}
			}
		}
	}

	function apply_default_pose {
		# Changes the pose of the rig to the the default pose with interpolation
		IF (show_function_errors) {
			# Assert that the function is being run as the root entity.
			execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
				function *global/errors/function_not_executed_as_root_entity \
					{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
		}
		REPEAT (Object.values(rig.nodes)) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.path_name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.default_transform.matrix).toString()%>, start_interpolation: 0}
			}
		}
	}

	function set_default_pose {
		# Changes the pose of the rig to the the default pose without interpolation
		IF (show_function_errors) {
			# Assert that the function is being run as the root entity.
			execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
				function *global/errors/function_not_executed_as_root_entity \
					{'export_namespace': '<%export_namespace%>', 'function_path': '<%arguments[1].functions.at(-1)%>'}
		}
		REPEAT (Object.values(rig.nodes)) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.path_name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.default_transform.matrix).toString()%>, start_interpolation: -1}
			}
		}
	}
}
