
dir global {
	function on_load load {
		# Initialize Scoreboards
		scoreboard objectives add aj.i dummy
		scoreboard objectives add aj.id dummy
		scoreboard objectives add aj.frame dummy
		scoreboard objectives add aj.rig_is_loaded dummy

		scoreboard players set aj.true aj.i 1
		scoreboard players set aj.false aj.i 0
		scoreboard players add aj.last_id aj.id 0

		scoreboard players reset * aj.rig_is_loaded
		execute as @e[type=item_display,tag=aj.root_entity] unless score @s aj.rig_is_loaded matches 1 at @s run function #animated_java:global/root_entity/on_load
	}

	function on_tick tick {
		execute as @e[type=item_display,tag=aj.root_entity] at @s run function #animated_java:global/root_entity/on_tick
	}

	function help {
		# This just prints a link to the docs.
		tellraw @a {"text": "..."}
	}

	dir root_entity {
		function on_tick {
			execute unless score @s aj.rig_is_loaded matches 1 run function #animated_java:global/root_entity/on_load
			function #animated_java:global/root_entity/on_tick
		}
		function on_load {
			function #animated_java:global/root_entity/on_load
			scoreboard players set @s aj.rig_is_loaded 1
		}

		# TODO Maybe instead of merging tags, I should just generate it from the .ajmeta data every time a rig is exported?
		# That way I can also check if the rig's files still exist, and remove tag entries if they don't.
		# An entry will be added for each exported rig.
		tag functions on_tick {
			#animated_java:<%export_namespace%>/zzz/on_tick
		}
		# An entry will be added for each exported rig.
		tag functions on_load {
			#animated_java:<%export_namespace%>/zzz/on_load
		}
	}

	# An entry will be added for each exported rig.
	tag functions check_if_rig_outdated {
		#animated_java:<%export_namespace%>/zzz/check_if_rig_outdated
	}

	dir errors {
		function function_not_executed_as_root_entity {
			# Make this text fancier in the actual implementation.
			$tellraw @a 'The function $(function_path) must be executed as the root entity of the rig.'
		}
	}
}

dir <%export_namespace%> {
	function uninstall {
		# TODO Remove all scoreboard for this rig from the world.
	}

	function on_tick {
		# This command will be added for each animation.
		REPEAT (animations) as animation {
			execute if entity @s[tag=aj.<%export_namespace%>.animation.<%animation.name%>.playing] run \
				function *<%export_namespace%>/animations/<%animation.name%>/on_tick
		}
	}

	# Function Tag Hooks
	dir as_root {
		# All child functions of this folder run as the root entity
		# Runs before the rig is ticked.
		tag functions pre_tick {
		}
		# Runs after the rig is ticked.
		tag functions post_tick {
		}
		# Runs when the rig is summoned.
		tag functions on_summon {
		}
		# Runs when the rig is removed.
		tag functions on_remove {
		}
	}

	dir as_bone {
		# All child functions of this folder run as a bone entity
		# Runs before the bone is ticked.
		tag functions pre_tick {
		}
		# Runs after the bone is ticked.
		tag functions post_tick {
		}
		# Runs when the bone is summoned.
		tag functions on_summon {
		}
		# Runs when the bone is removed.
		tag functions on_remove {
		}
	}

	dir as_locator {
		# All child functions of this folder run as a locator entity
		# Runs before the locator is ticked.
		tag functions pre_tick {
		}
		# Runs after the locator is ticked.
		tag functions post_tick {
		}
		# Runs when the locator is summoned.
		tag functions on_summon {
		}
		# Runs when the locator is removed.
		tag functions on_remove {
		}
	}

	dir as_camera {
		# All child functions of this folder run as a camera entity
		# Runs before the camera is ticked.
		tag functions pre_tick {
		}
		# Runs after the camera is ticked.
		tag functions post_tick {
		}
		# Runs when the camera is summoned.
		tag functions on_summon {
		}
		# Runs when the camera is removed.
		tag functions on_remove {
		}
	}

	dir animations {
		REPEAT (animations) as animation {
			dir <%animation.name%> {
				function play {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/play'}
					tag @s add aj.<%export_namespace%>.animation.<%animation.name%>.playing
				}
				function stop {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/stop'}
					tag @s remove aj.<%export_namespace%>.animation.<%animation.name%>.playing
				}
				function pause {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/pause'}
					tag @s remove aj.<%export_namespace%>.animation.<%animation.name%>.playing
				}
				function resume {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/resume'}
					tag @s add aj.<%export_namespace%>.animation.<%animation.name%>.playing
				}
				function reset {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/reset'}
					tag @s remove aj.<%export_namespace%>.animation.<%animation.name%>.playing
				}
				function next_frame {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/next_frame'}
				}
				function apply_frame {
					# ARGS: {frame: int}
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/apply_frame'}
				}
				function tween_play {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/tween_play'}
					tag @s add aj.<%export_namespace%>.animation.<%animation.name%>.tween_playing
				}
				function tween_resume {
					execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
						function *global/errors/function_not_executed_as_root_entity \
						with {'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/tween_resume'}
					tag @s add aj.<%export_namespace%>.animation.<%animation.name%>.tween_playing
				}
				dir zzz {
					function on_tick {
					}
				}
			}
		}
	}

	function summon {
		#Args: {args:{variant: string, animation: string, frame: int, start_animation: boolean}}
		# frame is ignored unless animation is specified.

		summon minecraft:item_display ~ ~ ~ {Tags:['aj.rig_entity','aj.root_entity','aj.$<project_name>.root','aj.new'],Passengers:[]}
		execute as @e[type=item_display,tag=aj.new,limit=1,distance=..0.01] run {
			execute store result score @s aj.id run scoreboard players add aj.last_id aj.id 1
			tag @s remove aj.new

			data set value aj:temp args set value {variant:'', animation:'', frame: 0}
			$execute store success score #success aj.i run data modify storage aj:temp args set value $(args)

			# Variant Arguement
			execute if data storage aj:temp args.variant run {
				execute if data storage aj:temp {args:{variant:''}} run return run tellraw @a 'The variant argument cannot be an empty string.'
				# Attempt to apply the variant, if it fails, print an error.
				execute store success score #success aj.i run { with storage aj:temp args
					$execute store success score #success aj.i run function *<%export_namespace%>/variants/$(variant)/apply
					execute if score #success aj.i matches 1 run return 1
					return fail
				}
				$execute unless score #success aj.i matches 1 run return run tellraw @a 'The variant $(variant) does not exist.'
			}

			# Animation, Frame, and Start Animation Arguments
			execute if data storage aj:temp args.animation run {
				execute if data storage aj:temp {args:{animation:''}} run return run tellraw @a 'The animation argument cannot be an empty string.'
				execute store result score #frame aj.i run data get storage aj:temp args.frame
				execute if score #frame aj.i matches ..-1 run return run tellraw @a 'The frame argument must be a non-negative integer.'
				execute store result storage aj:temp args.frame int 1 run scoreboard players get #frame aj.i
				# Attempt to apply the animation frame, if it fails, print an error.
				execute store success score #success aj.i run { with storage aj:temp args
					$execute store success score #success aj.i run function *<%export_namespace%>/animations/$(animation)/apply_frame {frame: $(frame)}
					execute if score #success aj.i matches 1 run return 1
					return fail
				}
				$execute unless score #success aj.i matches 1 run return run tellraw @a 'The animation $(animation) does not exist.'
				execute if data storage aj:temp {args:{start_animation: true}} run { with storage aj:temp args
					$function *<%export_namespace%>/animations/$(animation)/resume
				}
			}
			# Run the on_summon function for the root entity.
			function #*<%export_namespace%>/as_root/on_summon
		}
	}

	dir summon {
		REPEAT (variants) as variant {
			function <%variant.name%> {
				function *<%export_namespace%>/summon {args:{variant: '<%variant.name%>'}}
			}
		}
	}

	dir remove {
		# Removes all instances of this rig from the world.
		function all {
			execute as @e[type=item_display,tag=aj.project_name.root] run function #animated_java:<%export_namespace%>/remove/this
		}
		# Removes the rig this function is executed as.
		function this {
			execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
				function *global/errors/function_not_executed_as_root_entity \
				with {'function_path': 'animated_java:<%export_namespace%>/remove/this'}
			# TODO Remove the rig here.
			execute on passengers run kill @s
			kill @s
		}
		# Removes all instances of all rigs from the world.
		function everything {
			# Args: {confirm: boolean}
			$execute if score aj.$(confirm) aj.i matches 0 run tellraw @a 'Are you sure you want to remove all Animated Java rigs from the world? Run this command again with {confirm:true} to confirm.'
			$execute if score aj.$(confirm) aj.i matches 1 run {
				kill @e[type=item_display,tag=aj.rig_entity]
				tellraw @a 'All Animated Java rigs have been removed from the world.'
			}
		}
	}

	dir variants {
		REPEAT (variants) as variant {
			IF (!variant.isDefault) {
				dir <%variant.name%> {
					function apply {
						execute unless entity @s[type=item_display,tag=aj.root_entity] run return run \
							function *global/errors/function_not_executed_as_root_entity \
							with {'function_path': 'animated_java:<%export_namespace%>/variants/<%variant.name%>/apply'}
						# TODO Apply the variant to the rig here.
						REPEAT (Object.values(rig.nodeMap)) as bone {
							IF (bone.type === 'bone' && !Object.values(variant.excludedBones).find(v => v.value === bone.node.uuid)) {
								execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%bone.name%>] run {
									<%%
										console.log(variant.name, bone, rig.variantModels)
									%%>
									data modify entity @s item.components.minecraft:custom_model_data set value <%rig.variantModels[variant.name][bone.node.uuid].customModelData%>
								}
							}
						}
					}
				}
			}
		}
	}

	dir zzz {
		function check_if_rig_outdated {
			execute unless score @s aj.<%export_version%> matches <%export_version%> run function #animated_java:<%export_namespace%>/zzz/update_outdated_rig
		}

		function update_outdated_rig {
			# TODO Figure out how this will work.
			# It will probably involve killing the existing bones, and re-summoning them, then applying the default NBT to the root entity?
			# This probably won't work in cases where custom NBT is removed from the root between exports.
		}
	}
}
