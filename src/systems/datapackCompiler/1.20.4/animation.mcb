dir global {

	function on_load minecraft:load {
		# Initialize Scoreboards
		scoreboard objectives add <%OBJECTIVES.I()%> dummy
		scoreboard objectives add <%OBJECTIVES.ID()%> dummy
		scoreboard objectives add <%OBJECTIVES.IS_RIG_LOADED()%> dummy
		scoreboard objectives add <%OBJECTIVES.TWEEN_DURATION()%> dummy

		scoreboard players add aj.last_id <%OBJECTIVES.ID()%> 0

		# Initialize Storage
		data modify storage aj:temp args set value {}
		IF (show_outdated_warning) {
			# Initialize Rigs
			scoreboard players reset * <%OBJECTIVES.IS_RIG_LOADED()%>
		}
		function #*global/on_load
	}

	function on_tick minecraft:tick {
		execute as @e[type=item_display,tag=<%TAGS.GLOBAL_ROOT()%>] at @s run function #*global/root/on_tick
	}

	tag functions on_load {
		*<%export_namespace%>/on_load
	}

	dir root {
		# TODO Maybe instead of merging tags, I should just generate it from the .ajmeta data every time a rig is exported?
		# That way I can also check if the rig's files still exist, and remove tag entries if they don't.
		# An entry will be added for each exported rig.
		tag functions on_tick {
			*<%export_namespace%>/root/on_tick
		}
		# An entry will be added for each exported rig.
		IF (show_outdated_warning) {
			tag functions on_load {
				*<%export_namespace%>/root/on_load
			}
		}
	}

	IF (show_function_errors) {
		dir errors {
			function function_not_executed_as_root_entity {
				#ARGS: {export_namespace: string, function_path: string}
				$tellraw @a <%TELLRAW.FUNCTION_NOT_EXECUTED_AS_ROOT_ERROR('$(function_path)')%>
			}
		}
	}

	dir remove {
		# Removes all instances of all rigs from the world.
		function everything {
			kill @e[tag=<%TAGS.GLOBAL_RIG()%>]
		}
	}

	dir internal {
		# Thanks Gibbsly for this code! https://github.com/gibbsly/gu
		dir gu {
			function load minecraft:load {
				scoreboard players set 256 <%OBJECTIVES.I()%> 256
				data modify storage aj:uuid main.hex_chars set value \
					<%JSON.stringify([...Array(0x100).keys()].map(v => {const x = v.toString(16); return x.length > 1 ? x : '0' + x}))%>
			}

			function convert_uuid_array_to_string {
				#ARGS: {UUID: [int, int, int, int]}

				data modify storage aj:uuid temp set value {0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,a:0,b:0,c:0,d:0,e:0,f:0}
				$data modify storage aj:uuid main.in set value $(UUID)

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[0]
				execute store result storage aj:uuid temp.0 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.1 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.2 int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.3 int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[1]
				execute store result storage aj:uuid temp.4 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.5 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.6 int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.7 int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[2]
				execute store result storage aj:uuid temp.8 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.9 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.a int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.b int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[3]
				execute store result storage aj:uuid temp.c int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.d int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.e int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.f int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				block { with storage aj:uuid temp
					REPEAT (0, 15) as i {
						$data modify storage aj:uuid temp.<%i.toString(16)%> set from storage aj:uuid main.hex_chars[$(<%i.toString(16)%>)]
					}
				}

				block { with storage aj:uuid temp
					$data modify storage aj:uuid main.out set value "$(3)$(2)$(1)$(0)-$(7)$(6)-$(5)$(4)-$(b)$(a)-$(9)$(8)$(f)$(e)$(d)$(c)"
				}
			}
		}
	}
}

dir <%export_namespace%> {
	function on_load {
		IF (use_storage_for_animation) {
			REPEAT (animations) as animation {
				data remove storage aj.<%export_namespace%>:animations <%animation.safe_name%>
			}
			<%animationStorage.join('\n')%>
		}
		<%%
			animations.forEach(animation => {
				emit(`scoreboard objectives add ${OBJECTIVES.FRAME(animation.safe_name)} dummy`)
			})
		%%>
	}

	dir root {
		IF (show_outdated_warning) {
			function on_load {
				execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
				execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] \
						unless data entity @s {data:{rigHash: '<%rigHash%>'}} on vehicle run {
					execute store result storage aj:temp x int 1 store result score #this.x aj.i run data get entity @s Pos[0] 1
					execute store result storage aj:temp y int 1 store result score #this.y aj.i run data get entity @s Pos[1] 1
					execute store result storage aj:temp z int 1 store result score #this.z aj.i run data get entity @s Pos[2] 1
					block outdated_tellraw { with storage aj:temp
						$tellraw @a <%TELLRAW.RIG_OUTDATED()%>
					}
					data modify entity @s data.rigHash set value '<%rigHash%>'
					execute on passengers run data merge entity @s {Glowing: 1b, glow_color_override: <%0xff0000%>}
					summon minecraft:text_display ~ ~ ~ {Tags:['<%TAGS.GLOBAL_RIG()%>', '<%TAGS.OUTDATED_RIG_TEXT_DISPLAY()%>', '<%TAGS.NEW()%>'], text:'<%TELLRAW.RIG_OUTDATED_TEXT_DISPLAY()%>', billboard: "vertical", transformation:{translation:[0f,<%boundingBox[1]/16%>f,0f],left_rotation:[0f,0f,0f,1f],right_rotation:[0f,0f,0f,1f],scale:[1f,1f,1f]}}
					ride @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] mount @s
					tag @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] remove <%TAGS.NEW()%>
				}
				scoreboard players set @s <%OBJECTIVES.IS_RIG_LOADED()%> 1
			}
		}
		function on_tick {
			execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
			IF (show_outdated_warning) {
				execute unless score @s <%OBJECTIVES.IS_RIG_LOADED()%> matches 1 run function #*global/root/on_load
			}
			# Pre tick
			function #*<%export_namespace%>/as_root/pre_tick
			# Animations
			REPEAT (animations) as animation {
				execute if entity @s[tag=<%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>] run \
					function *<%export_namespace%>/animations/<%animation.safe_name%>/zzz/on_tick
			}
			IF (has_locators || has_cameras) {
				execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run {
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator')) as node {
						IF (node.config?.use_entity) {
							block { with entity @s data.locators.<%node.safe_name%>
								$execute as $(uuid) positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run {
									tp @s ~ ~ ~ ~ ~
									<%%
										if (node.config?.ticking_commands) {
											emit.mcb(node.config.ticking_commands)
										}
									%%>
								}
							}
						} ELSE IF (node.config?.ticking_commands) {
							block { with entity @s data.locators.<%node.safe_name%>
								$execute positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run {
									<%%
										if (node.config?.ticking_commands) {
											emit.mcb(node.config.ticking_commands)
										}
									%%>
								}
							}
						}
					}
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as node {
						block { with entity @s data.cameras.<%node.safe_name%>
							$execute as $(uuid) positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run tp @s ~ ~ ~ ~ ~
						}
					}
				}
			}
			# Rotation Logic
			execute at @s on passengers run tp @s ~ ~ ~ ~ ~
			IF (root_ticking_commands) {
				<%%
					emit.mcb(root_ticking_commands)
				%%>
			}
			# Post tick
			function #*<%export_namespace%>/as_root/post_tick
		}
	}

	# FIXME - Maybe remove these in favor of the new options-based system?
	# Function Tag Hooks
	dir as_root {
		# All child functions of this folder run as the root entity
		# Runs before the rig is ticked.
		tag functions pre_tick {
		}
		# Runs after the rig is ticked.
		tag functions post_tick {
		}
		# Runs when the rig is summoned.
		tag functions on_summon {
		}
		# Runs when the rig is removed.
		tag functions on_remove {
		}
	}

	dir animations {
		REPEAT (animations) as animation {
			dir <%animation.safe_name%> {
				# TODO: Maybe add an exclusive argument to the play function that will pause all other animations before playing this one.
				function play {
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/play'}
					}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> 0
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/set_frame {frame: 0}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
				}
				function stop {
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/stop'}
					}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> 0
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/set_frame {frame: 0}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
				}
				function pause {
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/pause'}
					}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
				}
				function resume {
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/resume'}
					}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
				}
				function next_frame {
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/next_frame'}
					}
					execute if score @s <%OBJECTIVES.FRAME(animation.safe_name)%> matches <%animation.duration%>.. run scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> 1
					execute store result storage aj:temp frame int 1 run scoreboard players get @s <%OBJECTIVES.FRAME(animation.safe_name)%>
					execute at @s run function ./zzz/apply_frame with storage aj:temp
					scoreboard players add @s <%OBJECTIVES.FRAME(animation.safe_name)%> 1
				}
				function set_frame {
					# Sets the frame without interpolation
					#ARGS: {frame: int}
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/set_frame'}
					}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> $(frame)
					execute at @s run function ./zzz/set_frame with storage aj:temp
				}
				function apply_frame {
					# ARGS: {frame: int}
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/apply_frame'}
					}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> $(frame)
					execute at @s run function ./zzz/apply_frame with storage aj:temp
				}
				function tween {
					# Attempts to smoothly transition from the currently playing animation into this one.
					#ARGS: {duration: int, to_frame: int}
					IF (show_function_errors) {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.safe_name%>/tween'}
					}
					function *<%export_namespace%>/animations/pause_all

					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
					$scoreboard players set @s <%OBJECTIVES.TWEEN_DURATION()%> $(duration)
					$scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> $(to_frame)

					scoreboard players operation #this <%OBJECTIVES.I()%> = @s <%OBJECTIVES.TWEEN_DURATION()%>
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					execute at @s run function ./zzz/apply_frame {frame: 0}
					$execute at @s run function ./zzz/apply_frame {frame: $(to_frame)}
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
					execute on passengers store result entity @s interpolation_duration int 1 run scoreboard players get #this <%OBJECTIVES.I()%>
				}
				dir zzz {
					function on_tick {
						# Tweening logic
						scoreboard players remove @s <%OBJECTIVES.TWEEN_DURATION()%> 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 1.. run return 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 0 on passengers run data modify entity @s interpolation_duration set value <%interpolation_duration%>
						# Animation logic
						IF (animation.loop_mode === 'loop' && animation.loop_delay === 0) {
							# Makes sure commands in the last frame of the animation is run.
							execute if score @s <%OBJECTIVES.FRAME(animation.safe_name)%> matches -1 run {
								function ./apply_frame {frame: <%animation.duration-1%>}
								scoreboard players add @s <%OBJECTIVES.FRAME(animation.safe_name)%> 1
							}
						}
						execute store result storage aj:temp frame int 1 run scoreboard players get @s <%OBJECTIVES.FRAME(animation.safe_name)%>
						function ./apply_frame with storage aj:temp
						IF (animation.loop_mode === 'loop') {
							execute if score @s <%OBJECTIVES.FRAME(animation.safe_name)%> matches <%animation.duration-2 + animation.loop_delay%>.. run return run {
								scoreboard players set @s <%OBJECTIVES.FRAME(animation.safe_name)%> <%animation.loop_delay === 0 ? -1 : 0%>
							}
						} ELSE IF (animation.loop_mode === 'hold') {
							execute if score @s <%OBJECTIVES.FRAME(animation.safe_name)%> matches <%animation.duration-1%>.. run return run function ../pause
						} ELSE IF (animation.loop_mode === 'once') {
							execute if score @s <%OBJECTIVES.FRAME(animation.safe_name)%> matches <%animation.duration-1%> run return run function ../stop
						}
						scoreboard players add @s <%OBJECTIVES.FRAME(animation.safe_name)%> 1
					}
					IF (use_storage_for_animation) {
						function set_frame {
							#ARGS: {frame: int}
							REPEAT (Object.values(animation.modified_nodes).sort(nodeSorter)) as node {
								IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
									$execute on passengers run data modify entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, node.safe_name)%>] {} merge from \
										storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).<%node.type + '_' + node.safe_name%>
								} ELSE IF (['locator', 'camera'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run data modify entity @s data.<%node.type + 's.' + node.safe_name%> merge from \
										storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).<%node.type + '_' + node.safe_name%>
								}
							}
							IF (animation.frames.some(v => v.variant)) {
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run data modify storage aj:temp variant set from storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run function *<%export_namespace%>/animations/<%animation.safe_name%>/zzz/apply_variant with storage aj:temp variant
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run data remove storage aj:temp variant
							}
							execute on passengers run data modify entity @s[type=!marker] start_interpolation set value -1
						}
						function apply_frame {
							#ARGS: {frame: int}
							REPEAT (Object.values(animation.modified_nodes).sort(nodeSorter)) as node {
								IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, node.safe_name)%>] run data modify entity @s {} merge from \
										storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).<%node.type + '_' + node.safe_name%>
								} ELSE IF (['locator', 'camera'].includes(node.type)) {
									$execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run data modify entity @s data.<%node.type + 's.' + node.safe_name%> merge from \
										storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).<%node.type + '_' + node.safe_name%>
								}
							}
							IF (animation.frames.some(v => v.variant)) {
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run data modify storage aj:temp variant set from storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run function *<%export_namespace%>/animations/<%animation.safe_name%>/zzz/apply_variant with storage aj:temp variant
								$execute if data storage aj.<%export_namespace%>:animations <%animation.safe_name%>.$(frame).variant unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] run data remove storage aj:temp variant
							}
						}
						IF (animation.frames.some(v => v.variant)) {
							function apply_variant {
								#ARGS: {name: string, condition: string}
								$execute $(condition)run function *<%export_namespace%>/variants/$(name)/apply
							}
						}
					} ELSE {
						function set_frame {
							# Sets the frame without interpolation
							#ARGS: {frame: int}
							$execute on passengers if entity @s[type=marker] run \
								function ./frames/$(frame) with entity @s data.bones
							execute on passengers run data modify entity @s[type=!marker] start_interpolation set value -1
						}
						function apply_frame {
							#ARGS: {frame: int}
							$execute on passengers if entity @s[type=marker] run \
								function ./frames/$(frame) with entity @s data.bones
							<%%
								// A record of node uuid to INodeTransform.
								// Keeps track of the last time a bone was updated.
								// Only used for step keyframe interpolation.
								global.lastActiveFrame = {}
							%%>
						}
						dir frames {
							REPEAT (animation.frames) as frame {
								function <%animation.frames.indexOf(frame)%> {
									<%%
										global.merged = {
											locators: {},
											cameras: {}
										}
									%%>
									REPEAT (Object.values(animation.modified_nodes).sort(nodeSorter)) as node {
										<%%
											global.transform = frame.node_transforms[node.uuid]
										%%>
										IF (global.transform) {
											IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
												<%%
													const last = global.lastActiveFrame[node.uuid]
													global.isStepInterpolation = !!(last?.interpolation === 'step')
													global.lastActiveFrame[node.uuid] = global.transform
												%%>
												IF (global.transform.interpolation === 'pre-post' || global.isStepInterpolation) {
													$data merge entity $(<%node.type + '_' + node.safe_name%>) { \
															transformation: <%matrixToNbtFloatArray(global.transform.matrix).toString()%>, \
															start_interpolation: -1, \
															interpolation_duration: 0 \
														}
												} ELSE {
													$data merge entity $(<%node.type + '_' + node.safe_name%>) { \
															transformation: <%matrixToNbtFloatArray(global.transform.matrix).toString()%>, \
															start_interpolation: 0, \
															interpolation_duration: <%interpolation_duration%> \
														}
												}
											} ELSE IF (node.type === 'locator') {
												IF (node.config?.use_entity || node.config?.ticking_commands) {
													<%%
														global.merged.locators[node.safe_name] = {
															posx: global.transform.pos[0],
															posy: global.transform.pos[1],
															posz: global.transform.pos[2],
															roty: global.transform.head_rot[1],
															rotx: global.transform.head_rot[0]
														}
													%%>
												}
												IF (global.transform.commands) {
													execute on vehicle unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] <%global.transform.execute_condition ? global.transform.execute_condition.trim() + ' ' : ''%>positioned \
															^<%roundTo(global.transform.pos[0], 10)%> \
															^<%roundTo(global.transform.pos[1], 10)%> \
															^<%roundTo(global.transform.pos[2], 10)%> \
														rotated \
															~<%roundTo(global.transform.head_rot[1], 10)%> \
															~<%roundTo(global.transform.head_rot[0], 10)%> \
													run {
														<%%
															emit.mcb(global.transform.commands)
														%%>
													}
												}
											} ELSE IF (node.type === 'camera') {
												IF (rig.nodes[node.uuid]) {
													<%%
														global.merged.cameras[node.safe_name] = {
															posx: global.transform.pos[0],
															posy: global.transform.pos[1],
															posz: global.transform.pos[2],
															roty: global.transform.head_rot[1],
															rotx: global.transform.head_rot[0]
														}
													%%>
												}
											}
										}
									}
									IF (Object.keys(global.merged.locators).length > 0 || Object.keys(global.merged.cameras).length > 0) {
										data modify entity @s data merge value <%JSON.stringify(global.merged)%>
									}
									<%%
										if (frame.variant) {
											const variant = rig.variants[frame.variant.uuid]
											if (!variant) return
											const execute_condition = variant.execute_condition ? variant.execute_condition.trim() + ' ' : ''
											emit.mcb(`execute on vehicle unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] ${execute_condition}run function *${export_namespace}/variants/${variant.name}/apply`)
										}
										if (frame.commands) {
											const commands = frame.commands
											const execute_condition = commands.execute_condition ? commands.execute_condition.trim() + ' ' : ''
											emit.mcb(`execute on vehicle unless entity @s[tag=<%TAGS.TRANSFORMS_ONLY()%>] at @s ${execute_condition}run {\n${commands.commands}\n}`)
										}
									%%>
								}
							}
						}
					}
				}
			}
		}
		function pause_all {
			# Pauses all animations
			execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
				function *global/errors/function_not_executed_as_root_entity \
					{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/animations/pause_all'}
			REPEAT (animations) as animation {
				tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.safe_name)%>
			}
		}
	}

	function summon {
		#Args: {args:{variant: string, animation: string, frame: int, start_animation: boolean}}
		# frame is ignored unless animation is specified.

		data modify storage aj:temp args set value {frame: 0}
		$execute store success score #success <%OBJECTIVES.I()%> run data modify storage aj:temp args set value $(args)

		summon minecraft:item_display ~ ~ ~ { \
			Tags:['<%TAGS.NEW()%>','<%TAGS.GLOBAL_RIG()%>','<%TAGS.GLOBAL_ROOT()%>','<%TAGS.PROJECT_ROOT(export_namespace)%>'], \
			teleport_duration: 0, \
			interpolation_duration: <%interpolation_duration%>, \
			Passengers:<%root_entity_passengers%>, \
		}
		execute as @e[type=item_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] run {
			execute store result score @s <%OBJECTIVES.ID()%> run scoreboard players add aj.last_id <%OBJECTIVES.ID()%> 1

			execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
				function *global/internal/gu/convert_uuid_array_to_string with entity @s
				data modify entity @s data.bones.data_data set from storage aj:uuid main.out

				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator')) as locator {
					IF (locator.config && locator.config.use_entity) {
						summon <%locator.config.entity_type%> ~ ~ ~ {Tags:['<%TAGS.NEW()%>', '<%TAGS.GLOBAL_LOCATOR()%>', '<%TAGS.PROJECT_LOCATOR(export_namespace)%>', '<%TAGS.LOCAL_LOCATOR(export_namespace, locator.name)%>']}
						execute as @e[type=<%locator.config.entity_type%>,tag=<%TAGS.NEW()%>,tag=<%TAGS.GLOBAL_LOCATOR()%>,limit=1,distance=..0.01] run {
							tag @s remove <%TAGS.NEW()%>

							function *global/internal/gu/convert_uuid_array_to_string with entity @s
							<%%
								if (locator.config.summon_commands) {
									emit.mcb(locator.config.summon_commands)
								}
							%%>
						}
						data modify entity @s data.locators.<%locator.name%>.uuid set from storage aj:uuid main.out
					}
				}

				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as camera {
					summon item_display ~ ~ ~ {Tags:['<%TAGS.NEW()%>', '<%TAGS.GLOBAL_CAMERA()%>', '<%TAGS.PROJECT_CAMERA(export_namespace)%>', '<%TAGS.LOCAL_CAMERA(export_namespace, camera.name)%>'], teleport_duration: 2}
					execute as @e[type=item_display,tag=<%TAGS.NEW()%>,tag=<%TAGS.GLOBAL_CAMERA()%>,limit=1,distance=..0.01] run {
						tag @s remove <%TAGS.NEW()%>

						function *global/internal/gu/convert_uuid_array_to_string with entity @s
					}
					data modify entity @s data.cameras.<%camera.name%>.uuid set from storage aj:uuid main.out
				}

				REPEAT (Object.values(rig.nodes).filter(v => ['bone', 'text_display', 'item_display', 'block_display'].includes(v.type))) as bone {
					execute on vehicle on passengers if entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, bone.name)%>] run \
						function *global/internal/gu/convert_uuid_array_to_string with entity @s
					data modify entity @s data.bones.<%bone.type + '_' + bone.name%> set from storage aj:uuid main.out
				}
			}

			tag @s remove <%TAGS.NEW()%>

			# Variant Arguement
			IF (Object.keys(rig.variants).length > 1) {
				execute if data storage aj:temp args.variant run { with storage aj:temp args
					execute if data storage aj:temp {args:{variant:''}} run return run {
						tellraw @a <%TELLRAW.VARIANT_CANNOT_BE_EMPTY()%>
						function *<%export_namespace%>/remove/this
					}
					# Attempt to apply the variant, if it fails, print an error.
					execute store success score #success <%OBJECTIVES.I()%> run { with storage aj:temp args
						$execute store success score #success <%OBJECTIVES.I()%> run function *<%export_namespace%>/variants/$(variant)/apply
						execute if score #success <%OBJECTIVES.I()%> matches 1 run return 1
						return fail
					}
					execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run { with storage aj:temp args
						$tellraw @a <%TELLRAW.INVALID_VARIANT('$(variant)', rig.variants)%>
						function *<%export_namespace%>/remove/this
					}
				}
			} ELSE {
				execute if data storage aj:temp args.variant run {
					tellraw @a <%TELLRAW.NO_VARIANTS()%>
					function *<%export_namespace%>/remove/this
				}
			}

			# Animation, Frame, and Start Animation Arguments
			execute unless data storage aj:temp args.animation run function *<%export_namespace%>/set_default_pose
			execute if data storage aj:temp args.animation run { with storage aj:temp args
				execute if data storage aj:temp {args:{animation:''}} run return run {
					tellraw @a <%TELLRAW.ANIMATION_CANNOT_BE_EMPTY()%>
					function *<%export_namespace%>/remove/this
				}
				execute store result storage aj:temp args.frame int 1 \
					store result score #frame <%OBJECTIVES.I()%> run \
						data get storage aj:temp args.frame
				execute if score #frame <%OBJECTIVES.I()%> matches ..-1 run return run {
					tellraw @a <%TELLRAW.FRAME_CANNOT_BE_NEGATIVE()%>
					function *<%export_namespace%>/remove/this
				}
				# Attempt to apply the animation frame, if it fails, print an error.
				execute store success score #success <%OBJECTIVES.I()%> run { with storage aj:temp args
					tag @s add <%TAGS.TRANSFORMS_ONLY()%>
					$execute store success score #success <%OBJECTIVES.I()%> run function *<%export_namespace%>/animations/$(animation)/set_frame with storage aj:temp args
					tag @s remove <%TAGS.TRANSFORMS_ONLY()%>
					execute if score #success <%OBJECTIVES.I()%> matches 1 run return 1
					return fail
				}

				execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run { with storage aj:temp args
					$tellraw @a <%TELLRAW.INVALID_ANIMATION('$(animation)', animations)%>
					function *<%export_namespace%>/remove/this
				}

				execute if data storage aj:temp {args:{start_animation: 1b}} run { with storage aj:temp args
					$function *<%export_namespace%>/animations/$(animation)/resume
				}
			}
			tp @s ~ ~ ~ ~ ~
			execute at @s on passengers run tp @s ~ ~ ~ ~ ~
			data modify entity @s teleport_duration set value <%teleportation_duration%>
			execute on passengers run data modify entity @s teleport_duration set value <%teleportation_duration%>
			# Custom Summon Commands
			<%%
				if (custom_summon_commands) emit.mcb(custom_summon_commands)
			%%>
			# Custom Summon Commands

			# Run the on_summon function for the root entity.
			function #*<%export_namespace%>/as_root/on_summon
		}
	}

	IF (Object.keys(rig.variants).length > 1) {
		dir summon {
			REPEAT (Object.values(rig.variants)) as variant {
				function <%variant.name%> {
					function *<%export_namespace%>/summon {args:{variant: '<%variant.name%>'}}
				}
			}
		}
	}

	IF (has_entity_locators) {
		function as_own_locator_entities {
			#ARGS: {command: string}
			IF (show_function_errors) {
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/as_all_locators'}
			}
			$data modify storage aj:temp command set value '$(command)'
			execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
				REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator')) as locator {
					data modify storage aj:temp uuid set from entity @s data.locators.<%locator.name%>.uuid
					block zzz/execute { with storage aj:temp
						$execute as $(uuid) run $(command)
					}
				}
			}
		}
	}

	dir remove {
		# Removes all instances of this rig from the world.
		function all {
			execute as @e[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run function *<%export_namespace%>/remove/this
		}
		# Removes the rig this function is executed as.
		function this {
			IF (show_function_errors) {
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/remove/this'}
			}

			# On Remove Event
			function #*<%export_namespace%>/as_root/on_remove

			IF (has_entity_locators || has_cameras) {
				execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'locator' && v.config?.use_entity)) as locator {
						block zzz/kill { with entity @s data.locators.<%locator.name%>
							# Recursively remove any stacked locator entities
							$execute as $(uuid) run block kill_passengers {
								execute on passengers run function ^0
								kill @s
							}
						}
					}
					REPEAT (Object.values(rig.nodes).filter(v => v.type === 'camera')) as camera {
						block zzz/kill { with entity @s data.cameras.<%camera.name%>
							$execute as $(uuid) run kill @s
						}
					}
				}
			}

			execute on passengers run kill @s
			kill @s
		}
	}

	IF (Object.keys(rig.variants).length > 1) {
		dir variants {
			REPEAT (Object.values(rig.variants)) as variant {
				dir <%variant.name%> {
					function apply {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/variants/<%variant.name%>/apply'}
						REPEAT (Object.values(rig.nodes)) as node {
							IF (node.type === 'bone' && !variant.excluded_nodes.includes(node.uuid) && (variant.models[node.uuid] !== undefined || node.configs.variants[variant.uuid] !== undefined)) {
								execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.safe_name%>] run {
									IF (variant.models[node.uuid] !== undefined) {
										IF (variant.models[node.uuid].model === null) {
											data modify entity @s item.tag.CustomModelData set value 1
										} ELSE {
											data modify entity @s item.tag.CustomModelData set value <%variant.models[node.uuid].custom_model_data%>
										}
									}
									IF (node.configs.variants[variant.uuid]) {
										<%%
											global.config = BoneConfig.fromJSON(node.configs.variants[variant.uuid])
										%%>
										IF (!global.config.isDefault()) {
											data merge entity @s <%global.config.toNBT(undefined, variant.is_default)%>
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	function apply_default_pose {
		# Changes the pose of the rig to the the default pose with interpolation
		execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
			function *global/errors/function_not_executed_as_root_entity \
				{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/apply_default_pose'}
		REPEAT (Object.values(rig.nodes)) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.safe_name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.default_transform.matrix).toString()%>, start_interpolation: 0}
			}
		}
	}

	function set_default_pose {
		# Changes the pose of the rig to the the default pose without interpolation
		execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
			function *global/errors/function_not_executed_as_root_entity \
				{'export_namespace': '<%export_namespace%>', 'function_path': 'animated_java:<%export_namespace%>/set_default_pose'}
		REPEAT (Object.values(rig.nodes)) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.safe_name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.default_transform.matrix).toString()%>, start_interpolation: -1}
			}
		}
	}
}
