import { Parser, SyncIo, Tokenizer } from 'mc-build'
import { Compiler, VariableMap } from 'mc-build/dist/mcl/Compiler'
import { getDataPackFormat } from '../../util/minecraftUtil'

export function compile(
	path: string,
	mcbFile: string,
	destPath: string,
	variables: Record<string, any>
) {
	console.group('Compiling', path)
	console.log('Variables:', variables)

	const exportedFiles = new Map<string, string>()
	const compiler = new Compiler('src/', {
		libDir: null,
		generatedDirName: 'zzz',
		internalScoreboardName: 'aj.i',
		eqVarScoreboardName: null,
		eqConstScoreboardName: null,
		header: '# This file was generated by Animated Java via MC-Build. It is not recommended to edit this file directly.',
		ioThreadCount: null,
		dontEmitComments: true,
		setup: null,
		formatVersion: getDataPackFormat(Project!.animated_java.target_minecraft_versions),
	})
	compiler.disableRequire = true
	compiler.templateParsingEnabled = false

	function createSyncIO() {
		const io = new SyncIo()
		io.write = (localPath, content) => {
			const writePath = PathModule.join(destPath, localPath)
			exportedFiles.set(writePath, content)
		}
		return io
	}
	compiler.io = createSyncIO()

	console.time('MC-Build compiled in')
	const tokens = Tokenizer.tokenize(mcbFile, path)
	compiler.addFile(path, Parser.parseMcbFile(tokens))
	compiler.compile(VariableMap.fromObject(variables))
	console.timeEnd('MC-Build compiled in')
	console.log('Exported files:', exportedFiles.keys())
	console.groupEnd()

	return exportedFiles
}
