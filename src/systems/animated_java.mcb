dir global {

	function on_load minecraft:load {
		# Initialize Scoreboards
		<%%
			Object.values(OBJECTIVES).forEach(obj => {
				emit(`scoreboard objectives add ${obj()} dummy`)
			})
		%%>

		scoreboard players add aj.last_id <%OBJECTIVES.ID()%> 0

		# Initialize Storage
		data modify storage aj:temp args set value {}
		# Initialize Rigs
		scoreboard players reset * <%OBJECTIVES.IS_RIG_LOADED()%>
		function #animated_java:global/on_load
	}

	function on_tick minecraft:tick {
		execute as @e[type=item_display,tag=<%TAGS.GLOBAL_ROOT()%>] at @s run function #animated_java:global/root/on_tick
	}

	tag functions on_load {
		animated_java:<%export_namespace%>/on_load
	}

	dir root {
		# TODO Maybe instead of merging tags, I should just generate it from the .ajmeta data every time a rig is exported?
		# That way I can also check if the rig's files still exist, and remove tag entries if they don't.
		# An entry will be added for each exported rig.
		tag functions on_tick {
			animated_java:<%export_namespace%>/root/on_tick
		}
		# An entry will be added for each exported rig.
		tag functions on_load {
			animated_java:<%export_namespace%>/root/on_load
		}
	}

	function help {
		# This just prints a link to the docs.
		tellraw @a {"text": "..."}
	}

	dir errors {
		function function_not_executed_as_root_entity {
			# Make this text fancier in the actual implementation.
			$tellraw @a <%TELLRAW.FUNCTION_NOT_EXECUTED_AS_ROOT_ERROR('$(function_path)', TAGS.PROJECT_ROOT(export_namespace))%>
		}
	}

	dir remove {
		# Removes all instances of all rigs from the world.
		function everything {
			kill @e[type=item_display,tag=aj.rig_entity]
		}
	}

	dir internal {
		# Thanks Gibbly for this code! https://github.com/gibbsly/gu
		dir gu {
			function load minecraft:load {
				scoreboard players set 256 <%OBJECTIVES.I()%> 256
				data modify storage aj:uuid main.hex_chars set value \
					<%JSON.stringify([...Array(0x100).keys()].map(v => {const x = v.toString(16); return x.length > 1 ? x : '0' + x}))%>
			}

			function convert_uuid_array_to_string {
				#ARGS: {UUID: [int, int, int, int]}

				data modify storage aj:uuid temp set value {0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,a:0,b:0,c:0,d:0,e:0,f:0}
				$data modify storage aj:uuid main.in set value $(UUID)

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[0]
				execute store result storage aj:uuid temp.0 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.1 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.2 int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.3 int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[1]
				execute store result storage aj:uuid temp.4 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.5 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.6 int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.7 int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[2]
				execute store result storage aj:uuid temp.8 int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.9 int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.a int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.b int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				execute store result score 0= <%OBJECTIVES.I()%> store result score 1= <%OBJECTIVES.I()%> run data get storage aj:uuid main.in[3]
				execute store result storage aj:uuid temp.c int 1 run scoreboard players operation 0= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 2= <%OBJECTIVES.I()%> run scoreboard players operation 1= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.d int 1 run scoreboard players operation 1= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result score 3= <%OBJECTIVES.I()%> run scoreboard players operation 2= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.e int 1 run scoreboard players operation 2= <%OBJECTIVES.I()%> %= 256 <%OBJECTIVES.I()%>
				execute store result storage aj:uuid temp.f int 1 run scoreboard players operation 3= <%OBJECTIVES.I()%> /= 256 <%OBJECTIVES.I()%>

				block { with storage aj:uuid temp
					REPEAT (0, 15) as i {
						$data modify storage aj:uuid temp.<%i.toString(16)%> set from storage aj:uuid main.hex_chars[$(<%i.toString(16)%>)]
					}
				}

				block { with storage aj:uuid temp
					$data modify storage aj:uuid main.out set value "$(3)$(2)$(1)$(0)-$(7)$(6)-$(5)$(4)-$(b)$(a)-$(9)$(8)$(f)$(e)$(d)$(c)"
				}
			}
		}
	}
}

dir <%export_namespace%> {
	function uninstall {
		# TODO Remove all scoreboard for this rig from the world.
	}

	function on_load {
		IF (use_storage_for_animation) {
			data modify storage aj.<%export_namespace%>:animations list set value <%animationStorage.toString()%>
		}
		execute as @e[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] \
			unless score @s <%OBJECTIVES.IS_RIG_LOADED()%> matches 1 at @s run \
			function animated_java:<%export_namespace%>/root/on_load
	}

	dir root {
		function on_load {
			execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
			execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] \
					unless data entity @s {data:{rigHash: '<%rigHash%>'}} on vehicle run {
				execute store result storage aj:temp x int 1 store result score #this.x aj.i run data get entity @s Pos[0] 1
				execute store result storage aj:temp y int 1 store result score #this.y aj.i run data get entity @s Pos[1] 1
				execute store result storage aj:temp z int 1 store result score #this.z aj.i run data get entity @s Pos[2] 1
				block outdated_tellraw { with storage aj:temp
					$tellraw @a <%TELLRAW.RIG_OUTDATED(export_namespace)%>
				}
				data modify entity @s data.rigHash set value '<%rigHash%>'
				execute on passengers run data merge entity @s {Glowing: 1b, glow_color_override: <%0xff0000%>}
				summon minecraft:text_display ~ ~ ~ {Tags:['<%TAGS.GLOBAL_RIG()%>', '<%TAGS.OUTDATED_RIG_TEXT_DISPLAY()%>', '<%TAGS.NEW()%>'], text:'<%TELLRAW.RIG_OUTDATED_TEXT_DISPLAY()%>', billboard: "vertical", transformation:{translation:[0,<%boundingBox[1]/16%>,0],left_rotation:[0,0,0,1],right_rotation:[0,0,0,1],scale:[1,1,1]}}
				ride @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] mount @s
				tag @e[type=minecraft:text_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] remove <%TAGS.NEW()%>
			}
			scoreboard players set @s <%OBJECTIVES.IS_RIG_LOADED()%> 1
		}
		function on_tick {
			execute unless entity @s[tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return 0
			execute unless score @s <%OBJECTIVES.IS_RIG_LOADED()%> matches 1 run function #animated_java:global/root/on_load
			# Pre tick
			function #animated_java:<%export_namespace%>/as_root/pre_tick
			# Animations
			REPEAT (animations) as animation {
				execute if entity @s[tag=<%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>] run \
					function *<%export_namespace%>/animations/<%animation.name%>/zzz/on_tick
			}
			REPEAT (Object.values(rig.nodeMap).filter(v => v.type === 'locator')) as node {
				IF (node.config?.use_entity) {
					execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run { with entity @s data.positions.locators.<%node.name%>
						$execute as $(uuid) positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run {
							tp @s ~ ~ ~ ~ ~
							<%%
								if (node.config?.ticking_commands) {
									emit.mcb(node.config.ticking_commands)
								}
							%%>
						}
					}
				} ELSE IF (node.config?.ticking_commands) {
					execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run { with entity @s data.positions.locators.<%node.name%>
						$execute positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run {
							<%%
								if (node.config?.ticking_commands) {
									emit.mcb(node.config.ticking_commands)
								}
							%%>
						}
					}
				}
			}
			REPEAT (Object.values(rig.nodeMap).filter(v => v.type === 'camera')) as node {
				execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run { with entity @s data.positions.cameras.<%node.name%>
					$execute as $(uuid) positioned ^$(posx) ^$(posy) ^$(posz) rotated ~$(roty) ~$(rotx) run tp @s ~ ~ ~ ~ ~
				}
			}
			# Rotation Logic
			execute at @s on passengers run tp @s ~ ~ ~ ~ ~
			# Post tick
			function #animated_java:<%export_namespace%>/as_root/post_tick
		}
	}

	# FIXME - Maybe remove these in favor of the new options-based system?
	# Function Tag Hooks
	dir as_root {
		# All child functions of this folder run as the root entity
		# Runs before the rig is ticked.
		tag functions pre_tick {
		}
		# Runs after the rig is ticked.
		tag functions post_tick {
		}
		# Runs when the rig is summoned.
		tag functions on_summon {
		}
		# Runs when the rig is removed.
		tag functions on_remove {
		}
	}

	dir animations {
		REPEAT (animations) as animation {
			dir <%animation.name%> {
				# TODO: Maybe add an exclusive argument to the play function that will pause all other animations before playing this one.
				function play {
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/play'}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME()%> 0
					execute at @s run function ./zzz/set_frame {frame: 0}
				}
				function stop {
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/stop'}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
					scoreboard players set @s <%OBJECTIVES.FRAME()%> 0
					execute at @s run function ./zzz/set_frame {frame: 0}
				}
				function pause {
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/pause'}
					tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
				}
				function resume {
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/resume'}
					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
				}
				function next_frame {
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/next_frame'}
					execute if score @s <%OBJECTIVES.FRAME()%> matches <%animation.duration%>.. run scoreboard players set @s <%OBJECTIVES.FRAME()%> 1
					execute store result storage aj:temp frame int 1 run scoreboard players get @s <%OBJECTIVES.FRAME()%>
					execute at @s run function ./zzz/apply_frame with storage aj:temp
					scoreboard players add @s <%OBJECTIVES.FRAME()%> 1
				}
				function set_frame {
					# Sets the frame without interpolation
					#ARGS: {frame: int}
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/set_frame'}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME()%> $(frame)
					execute at @s run function ./zzz/set_frame with storage aj:temp
				}
				function apply_frame {
					# ARGS: {frame: int}
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/apply_frame'}
					$execute store result storage aj:temp frame int 1 run scoreboard players set @s <%OBJECTIVES.FRAME()%> $(frame)
					execute at @s run function ./zzz/apply_frame with storage aj:temp
				}
				function tween {
					# Attempts to smoothly transition from the currently playing animation into this one.
					#ARGS: {duration: int, to_frame: int}
					execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
						function *global/errors/function_not_executed_as_root_entity \
							{'function_path': 'animated_java:<%export_namespace%>/animations/<%animation.name%>/tween_play'}
					function *<%export_namespace%>/animations/pause_all

					tag @s add <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
					$scoreboard players set @s <%OBJECTIVES.TWEEN_DURATION()%> $(duration)
					$scoreboard players set @s <%OBJECTIVES.FRAME()%> $(to_frame)

					scoreboard players operation #this <%OBJECTIVES.I()%> = @s <%OBJECTIVES.TWEEN_DURATION()%>
					scoreboard players add @s <%OBJECTIVES.TWEEN_DURATION()%> 1
					$execute at @s run function ./zzz/apply_frame {frame: $(to_frame)}
					execute on passengers store result entity @s interpolation_duration int 1 run scoreboard players get #this <%OBJECTIVES.I()%>
				}
				dir zzz {
					function on_tick {
						# Tweening logic
						scoreboard players remove @s <%OBJECTIVES.TWEEN_DURATION()%> 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 1.. run return 1
						execute if score @s <%OBJECTIVES.TWEEN_DURATION()%> matches 0 on passengers run data modify entity @s interpolation_duration set value <%interpolation_duration%>
						# Animation logic
						execute store result storage aj:temp frame int 1 run scoreboard players get @s <%OBJECTIVES.FRAME()%>
						IF (animation.loopMode === 'loop') {
							# Makes sure commands in the last frame of the animation is run.
							execute if score @s <%OBJECTIVES.FRAME()%> matches -1 run {
								function ./apply_frame {frame: <%animation.duration-1%>}
								scoreboard players add @s <%OBJECTIVES.FRAME()%> 1
							}
						}
						function ./apply_frame with storage aj:temp
						IF (animation.loopMode === 'loop') {
							execute if score @s <%OBJECTIVES.FRAME()%> matches <%animation.duration-2%>.. run return run {
								scoreboard players set @s <%OBJECTIVES.FRAME()%> -1
							}
						} ELSE IF (animation.loopMode === 'hold') {
							execute if score @s <%OBJECTIVES.FRAME()%> matches <%animation.duration-1%>.. run return run function ../pause
						} ELSE IF (animation.loopMode === 'once') {
							execute if score @s <%OBJECTIVES.FRAME()%> matches <%animation.duration-1%> run return run function ../stop
						}
						scoreboard players add @s <%OBJECTIVES.FRAME()%> 1
					}
					IF (use_storage_for_animation) {
						function apply_frame {
							#ARGS: {frame: int}
							REPEAT (animation.includedNodes) as node {
								IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
									$execute on passengers run data modify entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, node.name)%>] {} merge from storage aj.<%export_namespace%>:animations list.<%animation.name%>.frames[$(frame)].<%node.name%>
								}
							}
						}
					} ELSE {
						function set_frame {
							# Sets the frame without interpolation
							#ARGS: {frame: int}
							$function ./frames/$(frame)
							execute on passengers run data modify entity @s start_interpolation set value -1
						}
						function apply_frame {
							#ARGS: {frame: int}
							$function ./frames/$(frame)
							<%%
								// A record of node uuid to IAnimationNode.
								// Keeps track of the last time a bone was updated.
								// Only used for step keyframe interpolation.
								global.lastActiveFrame = {}
							%%>
						}
						dir frames {
							REPEAT (animation.frames) as frame {
								function <%animation.frames.indexOf(frame)%> {
									<%%
										if (frame.variant) global.variant = variants.find(v => v.uuid === frame.variant.uuid)
									%%>
									IF (global.variant) {
										function *<%export_namespace%>/variants/<%global.variant.name%>/apply
									}
									REPEAT (frame.nodes.sort(nodeSorter)) as node {
										IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
											<%%
												const last = global.lastActiveFrame[node.uuid]
												global.isStepInterpolation = !!(last?.interpolation === 'step')
												global.lastActiveFrame[node.uuid] = node
											%%>
											# It's actually faster to use an on passeners call that checks tag immediately
											# than to spread it into a function that runs a bunch of tag checks on each bone.
											IF (node.interpolation === 'pre-post' || global.isStepInterpolation) {
												execute on passengers if entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, node.name)%>] run \
													data merge entity @s { \
														transformation: <%matrixToNbtFloatArray(node.matrix).toString()%>, \
														start_interpolation: -1, \
														interpolation_duration: 0 \
													}
											} ELSE {
												execute on passengers if entity @s[tag=<%TAGS.LOCAL_BONE(export_namespace, node.name)%>] run \
													data merge entity @s { \
														transformation: <%matrixToNbtFloatArray(node.matrix).toString()%>, \
														start_interpolation: 0, \
														interpolation_duration: <%interpolation_duration%> \
													}
											}
										} ELSE IF (node.type === 'locator') {
											IF (rig.nodeMap[node.uuid]?.config?.use_entity || rig.nodeMap[node.uuid]?.config?.ticking_commands) {
												<%%
													global.rot = getRotationFromQuaternion(node.rot)
												%%>
												execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run \
													data modify entity @s data.positions.locators.<%node.name%> merge value { \
														posx: <%node.pos.x%>, posy: <%node.pos.y%>, posz: <%node.pos.z%>, \
														rotx: <%global.rot.x%>, roty: <%global.rot.y%>, \
													}
											}
											IF (node.commands) {
												execute <%node.execute_condition ? node.execute_condition.trim() + ' ' : ''%>positioned \
														^<%roundTo(node.pos.x, 10)%> \
														^<%roundTo(node.pos.y, 10)%> \
														^<%roundTo(node.pos.z, 10)%> \
													rotated \
														~<%roundTo(node.rot.x, 10)%> \
														~<%roundTo(node.rot.y, 10)%> \
												run {
													<%%emit.mcb(node.commands)%%>
												}
											}
										} ELSE IF (node.type === 'camera') {
											IF (rig.nodeMap[node.uuid]) {
												<%%
													global.rot = getRotationFromQuaternion(node.rot)
												%%>
												execute on passengers if entity @s[tag=<%TAGS.PROJECT_DATA(export_namespace)%>] run \
													data modify entity @s data.positions.cameras.<%node.name%> merge value { \
														posx: <%node.pos.x%>, posy: <%node.pos.y%>, posz: <%node.pos.z%>, \
														rotx: <%global.rot.x%>, roty: <%global.rot.y%>, \
													}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		function pause_all {
			# Pauses all animations
			execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
				function *global/errors/function_not_executed_as_root_entity \
					{'function_path': 'animated_java:<%export_namespace%>/animations/pause_all'}
			REPEAT (animations) as animation {
				tag @s remove <%TAGS.ANIMATION_PLAYING(export_namespace, animation.name)%>
			}
		}
	}

	function summon {
		#Args: {args:{variant: string, animation: string, frame: int, start_animation: boolean}}
		# frame is ignored unless animation is specified.

		data modify storage aj:temp args set value {variant:'', animation:'', frame: 0}
		$execute store success score #success <%OBJECTIVES.I()%> run data modify storage aj:temp args set value $(args)

		summon minecraft:item_display ~ ~ ~ { \
			Tags:['<%TAGS.NEW()%>','<%TAGS.GLOBAL_RIG()%>','<%TAGS.GLOBAL_ROOT()%>','<%TAGS.PROJECT_ROOT(export_namespace)%>'], \
			teleport_duration: 0, \
			interpolation_duration: <%interpolation_duration%>, \
			Passengers:<%root_entity_passengers%>, \
		}
		execute as @e[type=item_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] run {
			execute store result score @s <%OBJECTIVES.ID()%> run scoreboard players add aj.last_id <%OBJECTIVES.ID()%> 1

			REPEAT (Object.values(rig.nodeMap).filter(v => v.type === 'locator')) as locator {
				IF (locator.config && locator.config.use_entity) {
					summon <%locator.config.entity_type%> ~ ~ ~ {Tags:['<%TAGS.NEW()%>', '<%TAGS.GLOBAL_LOCATOR()%>', '<%TAGS.PROJECT_LOCATOR(export_namespace)%>', '<%TAGS.LOCAL_LOCATOR(export_namespace, locator.name)%>']}
					execute as @e[type=<%locator.config.entity_type%>,tag=<%TAGS.NEW()%>,tag=<%TAGS.GLOBAL_LOCATOR()%>,limit=1,distance=..0.01] run {
						tag @s remove <%TAGS.NEW()%>

						function animated_java:global/internal/gu/convert_uuid_array_to_string with entity @s
						execute as @e[type=item_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
							data modify entity @s data.positions.locators.<%locator.name%>.uuid set from storage aj:uuid main.out
						}
						<%%
							if (locator.config.summon_commands) {
								emit.mcb(locator.config.summon_commands)
							}
						%%>
					}
				}
			}

			REPEAT (Object.values(rig.nodeMap).filter(v => v.type === 'camera')) as camera {
				summon item_display ~ ~ ~ {Tags:['<%TAGS.NEW()%>', '<%TAGS.GLOBAL_CAMERA()%>', '<%TAGS.PROJECT_CAMERA(export_namespace)%>', '<%TAGS.LOCAL_CAMERA(export_namespace, camera.name)%>'], teleport_duration: 2}
				execute as @e[type=item_display,tag=<%TAGS.NEW()%>,tag=<%TAGS.GLOBAL_CAMERA()%>,limit=1,distance=..0.01] run {
					tag @s remove <%TAGS.NEW()%>

					function animated_java:global/internal/gu/convert_uuid_array_to_string with entity @s
					execute as @e[type=item_display,tag=<%TAGS.NEW()%>,limit=1,distance=..0.01] on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
						data modify entity @s data.positions.cameras.<%camera.name%>.uuid set from storage aj:uuid main.out
					}
				}
			}

			tag @s remove <%TAGS.NEW()%>

			# Variant Arguement
			execute if data storage aj:temp args.variant run { with storage aj:temp args
				execute if data storage aj:temp {args:{variant:''}} run return run {
					tellraw @a <%TELLRAW.VARIANT_CANNOT_BE_EMPTY()%>
					function *<%export_namespace%>/remove/this
				}
				# Attempt to apply the variant, if it fails, print an error.
				execute store success score #success <%OBJECTIVES.I()%> run { with storage aj:temp args
					$execute store success score #success <%OBJECTIVES.I()%> run function *<%export_namespace%>/variants/$(variant)/apply
					execute if score #success <%OBJECTIVES.I()%> matches 1 run return 1
					return fail
				}
				execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run { with storage aj:temp args
					$tellraw @a <%TELLRAW.INVALID_VARIANT('$(variant)', variants)%>
					function *<%export_namespace%>/remove/this
				}
			}

			# Animation, Frame, and Start Animation Arguments
			execute unless data storage aj:temp args.animation run function *<%export_namespace%>/set_default_pose
			execute if data storage aj:temp args.animation run { with storage aj:temp args
				execute if data storage aj:temp {args:{animation:''}} run return run {
					tellraw @a <%TELLRAW.ANIMATION_CANNOT_BE_EMPTY()%>
					function *<%export_namespace%>/remove/this
				}
				execute store result storage aj:temp args.frame int 1 \
					store result score #frame <%OBJECTIVES.I()%> run \
						data get storage aj:temp args.frame
				execute if score #frame <%OBJECTIVES.I()%> matches ..-1 run return run {
					tellraw @a <%TELLRAW.FRAME_CANNOT_BE_NEGATIVE()%>
					function *<%export_namespace%>/remove/this
				}
				# Attempt to apply the animation frame, if it fails, print an error.
				execute store success score #success <%OBJECTIVES.I()%> run { with storage aj:temp args
					$execute store success score #success <%OBJECTIVES.I()%> run function *<%export_namespace%>/animations/$(animation)/zzz/set_frame with storage aj:temp args
					execute if score #success <%OBJECTIVES.I()%> matches 1 run return 1
					return fail
				}

				execute unless score #success <%OBJECTIVES.I()%> matches 1 run return run { with storage aj:temp args
					$tellraw @a <%TELLRAW.INVALID_ANIMATION('$(animation)', animations)%>
					function *<%export_namespace%>/remove/this
				}

				execute if data storage aj:temp {args:{start_animation: 1b}} run { with storage aj:temp args
					$function *<%export_namespace%>/animations/$(animation)/resume
				}
			}
			tp @s ~ ~ ~ ~ ~
			execute at @s on passengers run tp @s ~ ~ ~ ~ ~
			data modify entity @s teleport_duration set value <%teleportation_duration%>
			execute on passengers run data modify entity @s teleport_duration set value <%teleportation_duration%>
			# Custom Summon Commands
			<%%if (custom_summon_commands) emit.mcb(custom_summon_commands)%%>
			# Custom Summon Commands

			# Run the on_summon function for the root entity.
			function #animated_java:<%export_namespace%>/as_root/on_summon
		}
	}

	dir summon {
		REPEAT (variants) as variant {
			function <%variant.name%> {
				function *<%export_namespace%>/summon {args:{variant: '<%variant.name%>'}}
			}
		}
	}

	dir remove {
		# Removes all instances of this rig from the world.
		function all {
			execute as @e[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run function *<%export_namespace%>/remove/this
		}
		# Removes the rig this function is executed as.
		function this {
			execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
				function *global/errors/function_not_executed_as_root_entity \
					{'function_path': 'animated_java:<%export_namespace%>/remove/this'}

			# On Remove Event
			function #animated_java:<%export_namespace%>/as_root/on_remove

			execute on passengers if entity @s[tag=<%TAGS.GLOBAL_DATA()%>] run {
				REPEAT (Object.values(rig.nodeMap).filter(v => v.type === 'locator' && v.config?.use_entity)) as locator {
					block zzz/kill { with entity @s data.positions.locators.<%locator.name%>
						$kill $(uuid)
					}
				}
			}

			execute on passengers run kill @s
			kill @s
		}
	}

	dir variants {
		dir default {
			function apply {
				execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
					function *global/errors/function_not_executed_as_root_entity \
						{'function_path': 'animated_java:<%export_namespace%>/variants/default/apply'}
				REPEAT (Object.values(rig.nodeMap)) as node {
					IF (node.type === 'bone') {
						execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.name%>] run {
							data modify entity @s item.components.minecraft:custom_model_data set value <%node.customModelData%>
							<%%
								if (node.configs.default) {
									global.config = BoneConfig.fromJSON(node.configs.default)
									emit.mcb(`data merge entity @s <%global.config.toNBT(undefined, true)%>`)
								}
							%%>
						}
					}
				}
			}
		}
		REPEAT (variants) as variant {
			IF (!variant.isDefault) {
				dir <%variant.name%> {
					function apply {
						execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
							function *global/errors/function_not_executed_as_root_entity \
								{'function_path': 'animated_java:<%export_namespace%>/variants/<%variant.name%>/apply'}
						REPEAT (Object.values(rig.nodeMap)) as node {
							IF (node.type === 'bone' && !Object.values(variant.excludedBones).find(v => v.value === node.node.uuid) && (rig.variantModels[variant.name][node.node.uuid] !== undefined || node.configs.variants[variant.uuid])) {
								execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.name%>] run {
									IF (rig.variantModels[variant.name][node.node.uuid] !== undefined) {
										data modify entity @s item.components.minecraft:custom_model_data set value <%rig.variantModels[variant.name][node.node.uuid].customModelData%>
									}
									IF (node.configs.variants[variant.uuid]) {
										<%%
											global.config = BoneConfig.fromJSON(node.configs.variants[variant.uuid])
										%%>
										IF (!global.config.isDefault()) {
											data merge entity @s <%global.config.toNBT()%>
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	function apply_default_pose {
		# Changes the pose of the rig to the the default pose with interpolation
		execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
			function *global/errors/function_not_executed_as_root_entity \
				{'function_path': 'animated_java:<%export_namespace%>/apply_default_pose'}
		REPEAT (rig.defaultPose) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.matrix).toString()%>, start_interpolation: 0}
			}
		}
	}
	function set_default_pose {
		# Changes the pose of the rig to the the default pose without interpolation
		execute unless entity @s[type=item_display,tag=<%TAGS.PROJECT_ROOT(export_namespace)%>] run return run \
			function *global/errors/function_not_executed_as_root_entity \
				{'function_path': 'animated_java:<%export_namespace%>/set_default_pose'}
		REPEAT (rig.defaultPose) as node {
			IF (['bone', 'text_display', 'item_display', 'block_display'].includes(node.type)) {
				execute on passengers if entity @s[tag=aj.<%export_namespace%>.bone.<%node.name%>] run \
					data merge entity @s {transformation: <%matrixToNbtFloatArray(node.matrix).toString()%>, start_interpolation: -1}
			}
		}
	}
}
