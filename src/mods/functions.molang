smoothmin(a, b, k): |-
   v.h = math.clamp(0.5 + (0.5 * (a - b) / k), 0, 1);
   return math.lerp(a, b, v.h) - (k * v.h * (1 - v.h));

smoothclamp(value, min, max, k): |-
   return lunar.smoothmin(lunar.smoothmin(value, min, -k), max, k);

lopsided_wave(value, lopside_mag): |-
   return math.sin(value + math.cos(value) * lopside_mag);

easeinsine(progress): |-
   return 1 - math.cos((progress * 180) / 2);

easeoutsine(progress): |-
   return math.sin((progress * 180) / 2);

easeinoutsine(progress): |-
   return(math.cos(180 * progress) - 1) * -1 / 2;

easeinquad(progress): |-
   return progress * progress;

easeoutquad(progress): |-
   return 1 - (1 - progress) * (1 - progress);

easeinoutquad(progress): |-
   return progress < 0.5
      ? 2 * progress * progress
      : 1 - math.pow(-2 * progress + 2, 2) / 2;

easeincubic(progress): |-
   return progress * progress * progress;

easeoutcubic(progress): |-
   return 1 - math.pow(1 - progress, 3);

easeinoutcubic(progress): |-
   return progress < 0.5
      ? 4 * progress * progress * progress
      : 1 - math.pow(-2 * progress + 2, 3) / 2;

easeinquart(progress): |-
   return progress * progress * progress * progress;

easeoutquart(progress): |-
   return 1 - math.pow(1 - progress, 4);

easeinoutquart(progress): |-
   return progress < 0.5
      ? 8 * progress * progress * progress * progress
      : 1 - math.pow(-2 * progress + 2, 4) / 2;

easeinquint(progress): |-
   return progress * progress * progress * progress * progress;

easeoutquint(progress): |-
   return 1 - math.pow(1 - progress, 5);

easeinoutquint(progress): |-
   return progress < 0.5
      ? 16 * progress * progress * progress * progress * progress
      : 1 - math.pow(-2 * progress + 2, 5) / 2;

easeinexpo(progress): |-
   return progress == 0
      ? 0
      : math.pow(2, 10 * progress - 10);

easeoutexpo(progress): |-
   return progress == 1
      ? 1
      : 1 - math.pow(2, -10 * progress);

easeinoutexpo(progress): |-
   return progress == 0
      ? 0
      : progress == 1
         ? 1
         : progress < 0.5
            ? math.pow(2, 20 * progress - 10) / 2
            : (2 - math.pow(2, -20 * progress + 10)) / 2;

easeincirc(progress): |-
   return math.sqrt(1 - math.pow(progress - 1, 2));

easeoutcirc(progress): |-
   return math.sqrt(1 - math.pow(progress - 1, 2));

easeinoutcirc(progress): |-
   return progress < 0.5
      ? (1 - math.sqrt(1 - math.pow(2 * progress, 2))) / 2
      : (math.sqrt(1 - math.pow(-2 * progress + 2, 2)) + 1) / 2;

easeinback(progress, overshoot): |-
   t.overshoot=1.70158 * (overshoot ?? 1);
   return (t.overshoot + 1) * progress * progress * progress - t.overshoot * progress * progress;

easeoutback(progress, overshoot): |-
   t.overshoot=1.70158 * (overshoot ?? 1);
   return 1 + (t.overshoot + 1) * math.pow(progress - 1, 3) + t.overshoot * math.pow(progress - 1, 2);

easeinoutback(progress, overshoot): |-
   t.overshoot=1.70158 * (overshoot ?? 1);
   t.c2 = t.overshoot + 1;
   return progress < 0.5
      ? (math.pow(2 * progress, 2) * ((t.c2 + 1) * 2 * progress - t.c2)) / 2
      : (math.pow(2 * progress - 2, 2) * ((t.c2 + 1) * (progress * 2 - 2) + t.c2) + 2) / 2;

easeinelastic(progress): |-
   return progress == 0
      ? 0
      : progress == 1
         ? 1
         : -math.pow(2, 10 * progress - 10) * math.sin((progress * 10 - 10.75) * 90);

easeoutelastic(progress): |-
   return progress == 0
      ? 0
      : progress == 1
         ? 1
         : math.pow(2, -10 * progress) * math.sin((progress * 10 - 0.75) * 90) + 1;

easeinoutelastic(progress): |-
   return progress == 0
      ? 0
      : progress == 1
         ? 1
         : progress < 0.5
            ? (math.pow(2, 20 * progress - 10) * math.sin((20 * progress - 11.125) * 90) * -1) / 2
            : (math.pow(2, -20 * progress + 10) * math.sin((20 * progress - 11.125) * 90)) / 2 + 1;

easeinbounce(progress): |-
   return 1 - easeoutbounce(1 - progress);

easeoutbounce(progress): |-
   t.n1=7.5625;
   t.d1=2.75;
   return progress < 1 / t.d1
      ? (t.n1 * progress * progress)
      : progress < 2 / t.d1
         ? {
            progress = progress - 1.5 / t.d1;
            t.n1 * progress * progress + 0.75;
         }
         : progress < 2.5 / t.d1
            ? {
               progress = progress - 2.25 / t.d1;
               t.n1 * progress * progress + 0.9375;
            }
            : {
               progress = progress - 2.625 / t.d1;
               t.n1 * progress * progress + 0.984375;
            };

easeinoutbounce(progress): |-
   return progress < 0.5
      ? 1-easeinbounce(1-2 * progress) / 2
      : 1 + easeoutbounce(2 * progress - 1) / 2;

linear_wave(progress, hang): |-
   t.progress = progress * (math.pi / 180) + math.pi * 600;
   t.hang = hang * (math.pi / 180);
   return math.mod(math.abs(t.progress), 2 * math.pi + t.hang * 2) > math.pi + t.hang
      ? math.clamp(-math.mod(math.abs(t.progress), math.pi + t.hang) / math.pi + 1, 0, 1)
      : math.clamp(math.mod(math.abs(t.progress), math.pi + t.hang) / math.pi, 0, 1);