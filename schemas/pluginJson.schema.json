{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$ref": "#/definitions/jsonExport",
	"definitions": {
		"jsonExport": {
			"type": "object",
			"required": ["blueprint_settings", "resources", "rig", "animations"],
			"properties": {
				"blueprint_settings": {
					"type": "object",
					"required": [
						"export_namespace",
						"show_bounding_box",
						"auto_bounding_box",
						"bounding_box",
						"resource_pack_export_mode",
						"display_item",
						"custom_model_data_offset",
						"enable_advanced_resource_pack_settings",
						"resource_pack",
						"display_item_path",
						"model_folder",
						"texture_folder",
						"baked_animations",
						"json_file"
					],
					"properties": {
						"export_namespace": {
							"type": "string",
							"default": "armor_stand",
							"description": "The namespace to export the project to. This is the namespace that will be used in the exported Resource Pack and Data Pack."
						},
						"show_bounding_box": {
							"type": "boolean",
							"default": false,
							"description": "Whether or not to show the bounding box in the editor."
						},
						"auto_bounding_box": {
							"type": "boolean",
							"default": true,
							"description": "Whether or not to automatically calculate the bounding box based on the model's geometry. \n\nNOTE: The auto bounding box will NOT take bone offsets from animations into account, so the bounding box may be smaller than needed in some cases."
						},
						"bounding_box": {
							"type": "array",
							"default": [48, 48],
							"description": "Determines the culling box of the model. The model will stop rendering when this box is off-screen.",
							"items": {
								"type": "integer",
								"minimum": 0
							},
							"minItems": 2,
							"maxItems": 2
						},
						"resource_pack_export_mode": {
							"type": "string",
							"default": "raw",
							"description": "Determines how the Resource Pack should be exported.\n\nRaw - Exports the Resource Pack as a folder.\n\nZip - Exports the Resource Pack as a .zip file.\n\nNone - Disables Resource Pack exporting.",
							"enum": ["raw", "zip", "none"]
						},
						"display_item": {
							"type": "string",
							"default": "minecraft:white_dye",
							"description": "The item to display the Blueprints models in-game. Multiple Blueprints can be placed on the same item and they will be merged automatically."
						},
						"custom_model_data_offset": {
							"type": "integer",
							"default": 0,
							"description": "The offset to use for the Custom Model Data of the Display Item. Allows multiple Blueprints on the same item, but in separate, unaffiliated Resource Packs."
						},
						"enable_advanced_resource_pack_settings": {
							"type": "boolean",
							"default": false,
							"description": "Whether or not to enable the advanced Resource Pack settings. (Individual RP Folder Selection)"
						},
						"resource_pack": {
							"type": "string",
							"default": "",
							"description": "The root folder of the Resource Pack to export the project into."
						},
						"display_item_path": {
							"type": "string",
							"default": "",
							"description": "Where to place the Display Item. This should be a path to a .json file in a Resource Pack."
						},
						"model_folder": {
							"type": "string",
							"default": "",
							"description": "Where to place all of the exported models. This should be a path to a folder in a Resource Pack."
						},
						"texture_folder": {
							"type": "string",
							"default": "",
							"description": "Where to place all of the exported textures. This should be a path to a folder in a Resource Pack."
						},
						"baked_animations": {
							"type": "boolean",
							"default": true,
							"description": "Whether or not to bake the exported animations.\n\nBaked animations have their frames pre-calculated and stored in the exported JSON file, reducing the complexity of rendering the model in-game.\n\nSome Plugins may require this to be enabled to function correctly."
						},
						"json_file": { "type": "string", "default": "", "description": "" }
					}
				},
				"resources": {
					"type": "object",
					"required": [
						"textureExportFolder",
						"modelExportFolder",
						"displayItemPath",
						"models",
						"variant_models",
						"textures"
					],
					"properties": {
						"textureExportFolder": { "type": "string", "default": "" },
						"modelExportFolder": { "type": "string", "default": "" },
						"displayItemPath": { "type": "string", "default": "" },
						"models": {
							"type": "object",
							"description": "A map of bone UUIDs to custom bone models. This will be empty if no custom models are used.",
							"additionalProperties": false,
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"$ref": "#/definitions/vanillaModel"
								}
							}
						},
						"variant_models": {
							"type": "object",
							"description": "A map of variant UUIDS to maps of models to use for each bone when that variant is applied. Note that this map only contains bones modified and not excluded by the variant.",
							"additionalProperties": false,
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"type": "object",
									"additionalProperties": false,
									"patternProperties": {
										"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
											"$ref": "#/definitions/variantModelContainer"
										}
									}
								}
							}
						},
						"textures": {
							"type": "object",
							"additionalProperties": false,
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"type": "object",
									"required": ["name", "expectedPath", "src"],
									"properties": {
										"name": { "type": "string" },
										"id": {
											"type": "string",
											"description": "The ID of the texture used when making vanilla models."
										},
										"expectedPath": {
											"type": "string",
											"description": "The path in the resource pack that the models that reference this texture expect the texture to be at."
										},
										"src": {
											"type": "string",
											"description": "A data URL containing the texture image."
										}
									}
								}
							}
						}
					}
				},
				"rig": {
					"type": "object",
					"required": ["node_map", "node_structure", "variants"],
					"properties": {
						"node_map": {
							"type": "object",
							"additionalProperties": false,
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"$ref": "#/definitions/node"
								}
							}
						},
						"node_structure": {
							"type": "object",
							"required": ["uuid", "children"],
							"properties": {
								"uuid": { "const": "root" },
								"children": {
									"type": "array",
									"items": { "$ref": "#/definitions/nodeStructure" }
								}
							}
						},
						"variants": {
							"type": "object",
							"additionalProperties": false,
							"description": "A map of variant UUIDs to variant objects.",
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"$ref": "#/definitions/variant"
								}
							}
						}
					}
				},
				"animations": { "$ref": "#/definitions/dynamicAnimations" }
			},
			"if": {
				"properties": {
					"blueprint_settings": {
						"properties": {
							"baked_animations": { "const": true }
						}
					}
				}
			},
			"then": {
				"properties": {
					"animations": { "$ref": "#/definitions/bakedAnimations" }
				}
			}
		},
		"vec2": { "type": "array", "items": { "type": "number" }, "minItems": 2, "maxItems": 2 },
		"vec3": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
		"vec4": { "type": "array", "items": { "type": "number" }, "minItems": 4, "maxItems": 4 },
		"vanillaModel": {
			"type": "object",
			"required": ["textures", "elements", "display"],
			"properties": {
				"textures": {
					"type": "object",
					"patternProperties": { ".+": { "type": "string" } }
				},
				"elements": {
					"type": "array",
					"items": {
						"type": "object",
						"required": ["from", "to", "faces"],
						"properties": {
							"from": { "$ref": "#/definitions/vec3" },
							"to": { "$ref": "#/definitions/vec3" },
							"faces": {
								"type": "object",
								"properties": {
									"north": {
										"$ref": "#/definitions/vanillaElementFace"
									},
									"east": {
										"$ref": "#/definitions/vanillaElementFace"
									},
									"south": {
										"$ref": "#/definitions/vanillaElementFace"
									},
									"west": {
										"$ref": "#/definitions/vanillaElementFace"
									},
									"up": {
										"$ref": "#/definitions/vanillaElementFace"
									},
									"down": {
										"$ref": "#/definitions/vanillaElementFace"
									}
								}
							}
						}
					}
				},
				"display": {
					"type": "object",
					"properties": {
						"head": {
							"type": "object",
							"properties": { "rotation": { "$ref": "#/definitions/vec3" } }
						}
					}
				}
			}
		},
		"vanillaElementFace": {
			"type": "object",
			"properties": {
				"uv": {
					"type": "array",
					"items": { "type": "number" },
					"minItems": 4,
					"maxItems": 4
				},
				"texture": { "type": "string" }
			}
		},
		"variantModelContainer": {
			"type": "object",
			"required": ["model", "customModelData", "modelPath", "resourceLocation"],
			"properties": {
				"model": {
					"type": "object",
					"required": ["parent", "textures"],
					"properties": {
						"parent": { "type": "string" },
						"textures": {
							"type": "object",
							"patternProperties": { ".+": { "type": "string" } }
						}
					}
				},
				"customModelData": { "type": "integer" },
				"modelPath": { "type": "string" },
				"resourceLocation": { "type": "string" }
			}
		},
		"nodeTransform": {
			"type": "object",
			"description": "The transformation of a node. Includes several different storage methods for the transformation. All of these methods contain the same data, it's up to the plugin developer to choose which method to use.",
			"required": ["matrix", "pos", "rot", "scale"],
			"properties": {
				"matrix": {
					"type": "array",
					"description": "The transformation matrix of the node. The matrix is a 4x4 matrix in row-major order.",
					"items": { "type": "number" },
					"minItems": 16,
					"maxItems": 16
				},
				"transformation": {
					"type": "object",
					"description": "The decomposed matrix transformation of the node.",
					"translation": {
						"$ref": "#/definitions/vec3",
						"description": "A vector3 representing the translation of the node."
					},
					"left_rotation": {
						"$ref": "#/definitions/vec4",
						"description": "A quaternion representing the left rotation of the node."
					},
					"scale": {
						"$ref": "#/definitions/vec3",
						"description": "A vector3 representing the scale of the node."
					}
				},
				"pos": {
					"$ref": "#/definitions/vec3",
					"description": "A vector3 representing the position of the node."
				},
				"rot": {
					"$ref": "#/definitions/vec3",
					"description": "A vector3 representing the rotation of the node."
				},
				"head_rot": {
					"$ref": "#/definitions/vec2",
					"description": "A vector2 representing the head rotation of the node.\n\nUsed for correctly rotating located entities, and cameras, as they don't have access to a Z axis."
				},
				"scale": {
					"$ref": "#/definitions/vec3",
					"description": "A vector3 representing the scale of the node."
				},
				"interpolation": {
					"type": "string",
					"description": "The instant-interpolation mode of the node.\n\n- `pre-post`",
					"enum": ["pre-post", "step"]
				},
				"commands": { "type": "string" },
				"execute_condition": { "type": "string" }
			}
		},
		"node": {
			"type": "object",
			"required": ["type", "name", "uuid"],
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"bone",
						"struct",
						"camera",
						"locator",
						"text_display",
						"item_display",
						"block_display"
					]
				},
				"name": { "type": "string" },
				"uuid": { "type": "string" },
				"parent": { "type": "string" },
				"defaultTransform": {
					"$ref": "#/definitions/nodeTransform",
					"description": "The default transformation of the node."
				}
			},
			"allOf": [
				{
					"if": {
						"properties": {
							"type": { "const": "bone" }
						}
					},
					"then": {
						"required": [
							"modelPath",
							"customModelData",
							"resourceLocation",
							"boundingBox",
							"configs",
							"scale"
						],
						"properties": {
							"modelPath": { "type": "string" },
							"customModelData": { "type": "integer" },
							"resourceLocation": { "type": "string" },
							"boundingBox": {
								"type": "object",
								"required": ["min", "max"],
								"properties": {
									"min": { "$ref": "#/definitions/vec3" },
									"max": { "$ref": "#/definitions/vec3" }
								}
							},
							"scale": { "type": "number" },
							"configs": {
								"type": "object",
								"patternProperties": {
									"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
										"$ref": "#/definitions/boneConfig"
									}
								}
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "struct" }
						}
					},
					"then": {}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "camera" }
						}
					},
					"then": {}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "locator" }
						}
					},
					"then": {
						"required": ["config"],
						"properties": {
							"config": {
								"$ref": "#/definitions/locatorConfig"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "text_display" }
						}
					},
					"then": {
						"required": [
							"text",
							"lineWidth",
							"backgroundColor",
							"backgroundAlpha",
							"align",
							"scale",
							"config"
						],
						"properties": {
							"text": {},
							"lineWidth": { "type": "number" },
							"backgroundColor": { "type": "string" },
							"backgroundAlpha": { "type": "number" },
							"align": {
								"type": "string",
								"enum": ["left", "center", "right"]
							},
							"scale": { "type": "number" },
							"config": {
								"$ref": "#/definitions/boneConfig"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "block_display" }
						}
					},
					"then": {
						"required": ["config", "block", "scale"],
						"properties": {
							"block": { "type": "string" },
							"scale": { "type": "number" },
							"config": {
								"$ref": "#/definitions/boneConfig"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"type": { "const": "item_display" }
						}
					},
					"then": {
						"required": ["config", "item", "scale"],
						"properties": {
							"item": { "type": "string" },
							"scale": { "type": "number" },
							"config": {
								"$ref": "#/definitions/boneConfig"
							}
						}
					}
				}
			]
		},
		"boneConfig": {
			"type": "object",
			"properties": {
				"billboard": {
					"type": "string",
					"enum": ["fixed", "vertical", "horizontal", "center"]
				},
				"override_brightness": { "type": "boolean", "default": false },
				"brightness_override": { "type": "number", "default": 1 },
				"enchanted": { "type": "boolean", "default": false },
				"glowing": { "type": "boolean", "default": false },
				"override_glow_color": { "type": "boolean", "default": false },
				"glow_color": { "type": "string", "default": "#ffffff" },
				"inherit_settings": { "type": "boolean", "default": true },
				"invisible": { "type": "boolean", "default": false },
				"nbt": { "type": "string", "default": "{}" },
				"shadow_radius": { "type": "number", "default": 0 },
				"shadow_strength": { "type": "number", "default": 1 },
				"use_nbt": { "type": "boolean", "default": false }
			}
		},
		"locatorConfig": {
			"type": "object",
			"properties": {
				"use_entity": { "type": "boolean", "default": false },
				"entity_type": { "type": "string", "default": "minecraft:pig" },
				"summon_commands": { "type": "string", "default": "" },
				"ticking_commands": { "type": "string", "default": "" }
			}
		},
		"nodeStructure": {
			"type": "object",
			"required": ["uuid", "children"],
			"properties": {
				"uuid": { "type": "string" },
				"children": {
					"type": "array",
					"items": { "$ref": "#/definitions/nodeStructure" }
				}
			}
		},
		"bakedAnimations": {
			"type": "object",
			"patternProperties": {
				"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
					"type": "object",
					"required": [
						"name",
						"safeName",
						"duration",
						"loopDelay",
						"loopMode",
						"frames",
						"includedNodes"
					],
					"additionalProperties": false,
					"properties": {
						"name": { "type": "string" },
						"safeName": { "type": "string" },
						"duration": { "type": "number" },
						"loopDelay": { "type": "number" },
						"loopMode": { "type": "string", "enum": ["none", "loop", "ping-pong"] },
						"includedNodes": { "type": "array", "items": { "type": "string" } },
						"frames": {
							"type": "array",
							"items": {
								"type": "object",
								"required": ["time", "node_transforms"],
								"properties": {
									"time": { "type": "number" },
									"node_transforms": {
										"type": "object",
										"patternProperties": {
											"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
												"$ref": "#/definitions/nodeTransform"
											}
										}
									},
									"variant": {
										"type": "object",
										"description": "If included, this frame should change the variant of the model to the specified variant.",
										"properties": {
											"uuid": {
												"type": "string",
												"pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
											},
											"execute_condition": { "type": "string" }
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"dynamicAnimations": {
			"type": "object",
			"patternProperties": {
				"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
					"type": "object",
					"required": ["name", "loop_mode", "duration", "excluded_nodes", "animators"],
					"additionalProperties": true,
					"properties": {
						"uuid": { "type": "string" },
						"name": { "type": "string" },
						"loop_mode": { "type": "string", "enum": ["loop", "once", "hold"] },
						"duration": { "type": "number" },
						"loop_delay": { "type": "number" },
						"excluded_nodes": {
							"type": "array",
							"items": { "type": "string" }
						},
						"animators": {
							"type": "object",
							"patternProperties": {
								"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
									"type": "array",
									"items": { "$ref": "#/definitions/keyframe" }
								}
							}
						}
					}
				}
			}
		},
		"keyframe": {
			"type": "object",
			"required": ["time", "uuid", "channel", "data_points", "interpolation", "easing"],
			"properties": {
				"time": { "type": "number" },
				"uuid": { "type": "string" },
				"channel": { "type": "string" },
				"data_points": {
					"type": "array",
					"items": { "$ref": "#/definitions/keyframeDataPoint" }
				},
				"interpolation": {
					"type": "string",
					"enum": ["linear", "bezier", "catmullrom", "step"]
				},
				"easing": {
					"type": "string",
					"enum": [
						"linear",
						"step",
						"easeInQuad",
						"easeOutQuad",
						"easeInOutQuad",
						"easeInCubic",
						"easeOutCubic",
						"easeInOutCubic",
						"easeInQuart",
						"easeOutQuart",
						"easeInOutQuart",
						"easeInQuint",
						"easeOutQuint",
						"easeInOutQuint",
						"easeInSine",
						"easeOutSine",
						"easeInOutSine",
						"easeInExpo",
						"easeOutExpo",
						"easeInOutExpo",
						"easeInCirc",
						"easeOutCirc",
						"easeInOutCirc",
						"easeInBack",
						"easeOutBack",
						"easeInOutBack",
						"easeInElastic",
						"easeOutElastic",
						"easeInOutElastic",
						"easeInBounce",
						"easeOutBounce",
						"easeInOutBounce"
					]
				},
				"easingArgs": {
					"type": "array",
					"items": { "type": "number" }
				}
			}
		},
		"keyframeDataPoint": {
			"type": "object",
			"properties": {
				"x": { "type": "string" },
				"y": { "type": "string" },
				"z": { "type": "string" },
				"commands": { "type": "string" },
				"execute_condition": { "type": "string" },
				"repeat": { "type": "boolean" },
				"repeat_frequency": { "type": "number", "min": 1 }
			}
		},
		"variant": {
			"type": "object",
			"description": "A variant of the rig. Variants are used to change the appearance of the rig by swapping out different textures at runtime.",
			"required": ["name", "display_name", "uuid", "texture_map", "excluded_nodes"],
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the variant."
				},
				"display_name": {
					"type": "string",
					"description": "The display name of the variant. Only used for fancy display purposes such as UI elements."
				},
				"uuid": { "type": "string" },
				"texture_map": {
					"type": "object",
					"description": "A map of default texture UUID -> variant texture UUID. If a texture is not in this map, it will be assumed to be the same as the default texture.",
					"patternProperties": {
						"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
							"type": "string",
							"pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
						}
					}
				},
				"excluded_nodes": {
					"type": "array",
					"description": "A list of node UUIDs that should be excluded / ignored when this variant is applied.",
					"items": { "type": "string" }
				},
				"is_default": {
					"type": "boolean",
					"description": "Whether or not this variant is the default variant."
				}
			}
		}
	}
}
